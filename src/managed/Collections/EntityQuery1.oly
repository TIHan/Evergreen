namespace Evergreen.Collections

open System
open System.Collections.Generic
open Evergreen.Utilities

class EntityQuery<T1> 
        where T1: blittable, struct, ValueType 
        /*def(n):where T{n}: blittable, struct, ValueType*/
        =

    internal Database      : EntityDatabase    get
    internal ArchetypeGroup: Archetype[]       get
    internal EntIdGroup    : EntityIdStore[]   get
    internal BufferGroup1  : ComponentBuffer[] get
    /*def(n):internal BufferGroup{n}  : ComponentBuffer[] get*/

    internal new(
        database: EntityDatabase, 
        archetypeGroup: Archetype[],
        bufferGroup1: ComponentBuffer[],
        /*def(n):bufferGroup{n}: ComponentBuffer[],*/ 
        entIdGroup: EntityIdStore[]
    ) =
        {
            Database = database
            ArchetypeGroup = archetypeGroup
            BufferGroup1 = bufferGroup1
            /*def(n):BufferGroup{n} = bufferGroup{n}*/
            EntIdGroup = entIdGroup
        }

    private Filter<T>(predicate: scoped (fullId: ArchetypeId, filterId: ArchetypeId) -> bool): EntityQuery<T1>
            where T: blittable, struct, ValueType, { new() }, trait IComponent =
        let archetypeGroup = List()
        let entIdGroup = List()
        let bufferGroup1 = List()
        /*def(n):let bufferGroup2 = List()*/

        let filterId = GetArchetypeId<T>()

        For(this.ArchetypeGroup.Length,
            i ->
                let archetype = this.ArchetypeGroup[i]
                if (predicate(archetype.FullId, filterId))
                    archetypeGroup.Add(archetype)
                    entIdGroup.Add(this.EntIdGroup[i])
                    bufferGroup1.Add(this.BufferGroup1[i])
                    /*def(n):bufferGroup{n}.Add(this.BufferGroup{n}[i])*/
        )

        EntityQuery(
            this.Database,
            Unsafe.AsImmutable(archetypeGroup.ToArray()),
            Unsafe.AsImmutable(bufferGroup1.ToArray()),
            /*def(n):Unsafe.AsImmutable(bufferGroup{n}.ToArray()),*/
            Unsafe.AsImmutable(entIdGroup.ToArray())
        )

    public WhereContains<T>(): EntityQuery<T1>
            where T: blittable, struct, ValueType, { new() }, trait IComponent =
        this.Filter<T>((fullId, filterId) -> fullId.IsSupersetOf(filterId))

    public WhereNotContains<T>(): EntityQuery<T1>
        where T: blittable, struct, ValueType, { new() }, trait IComponent =
        this.Filter<T>((fullId, filterId) -> !fullId.IsSupersetOf(filterId))

#[open]
extension EntityDatabaseQuery1Extension =
    inherits EntityDatabase

    CreateQuery<T1>(): EntityQuery<T1> 
            where T1: blittable, struct, ValueType, { new() }, trait IComponent =
        let indices = this.GetArchetypedIndices(GetArchetypeId<T1>())

        let archetypeGroup = zeroArray<Archetype>(indices.Length)
        let entIdGroup = zeroArray<EntityIdStore>(indices.Length)
        let bufferGroup1 = zeroArray<ComponentBuffer>(indices.Length)

        let mutable i = 0
        while (i < indices.Length)
            let index = indices[i]
            let archetype = this.GetArchetype(index)
            
            archetypeGroup[i] <- archetype
            entIdGroup[i] <- archetype.EntityIds
            bufferGroup1[i] <- archetype.GetComponentBuffer(archetype.BufferLookup[T1.GetId()])

            i <- i + 1

        EntityQuery(
            this,
            Unsafe.AsImmutable(archetypeGroup), 
            Unsafe.AsImmutable(bufferGroup1),
            Unsafe.AsImmutable(entIdGroup)
        )

    #[inline]
    ForEachSpan<T1>(query: EntityQuery<T1>, #[inline] f: scoped (ReadOnlySpan<EntityId>, Span<T1>) -> ()): () 
            where T1: blittable, struct, ValueType, { new() }, trait IComponent =
        this.IncrementDepth()

        let archetypeGroup   = query.ArchetypeGroup
        let entIdGroup       = query.EntIdGroup
        let bufferGroup1     = query.BufferGroup1

        let mutable i = 0
        while (i < archetypeGroup.Length)
            let archetype = archetypeGroup[i]
            let entIds = entIdGroup[i]
            let buffer1 = bufferGroup1[i].Store
            let count = archetype.Count

            let sliceCount = if (count == 0) 0 else (count / ComponentBuffer.MaxNumberOfEntitiesPerSlice) + 1
            let sliceNumber = ComponentBuffer.MaxNumberOfEntitiesPerSlice

            let mutable j = 0
            while (j < sliceCount)
                if (j == sliceCount - 1)
                    let start = j * sliceNumber
                    let length = count - start
                    f(
                        entIds.GetReadOnlyChunkAs(j).Slice(0, length),
                        buffer1.GetChunkAs(j).Slice(0, length)
                    )
                else
                    f(
                        entIds.GetReadOnlyChunkAs(j),
                        buffer1.GetChunkAs(j)
                    )
                j <- j + 1

            i <- i + 1
        this.DecrementDepth()

    #[inline]
    ForEach<T1>(query: EntityQuery<T1>, #[inline] f: scoped (EntityId, byref<T1>) -> ()): () 
            where T1: blittable, struct, ValueType, { new() }, trait IComponent =
        this.ForEachSpan<T1>(query,
            (mutable entIds, mutable buffer1) ->
                let count = entIds.Length
                let mutable i = 0
                while (i < count)
                    f(entIds[i], &buffer1[i])
                    i <- i + 1
        )