#target "dotnet: net8"

#reference "C:/work/Oly/src/Compiler/Oly.Compiler.Syntax/Oly.Compiler.Syntax.fsproj"

open System
open System.IO
open System.Collections.Generic
open System.Collections.Immutable
open Microsoft.FSharp.Core
open Oly.Core
open Oly.Compiler
open Oly.Compiler.Syntax

#[open]
extension _OlySyntaxTreeExtensions =
    inherits OlySyntaxTree

    GetDescendants(filter: OlySyntaxNode -> bool): ImmutableArray<OlySyntaxNode> =
        class DescendantFilter =
            inherits FSharpFunc<OlySyntaxNode, bool>

            field f: OlySyntaxNode -> bool

            new(f: OlySyntaxNode -> bool) =
                base() with { f = f }
    
            overrides Invoke(node: OlySyntaxNode): bool =
                this.f(node)

        OlySyntaxTreeExtensions.`OlySyntaxNode.GetDescendants`(this.GetRoot(default), FSharpOption<_>.Some(DescendantFilter(filter): FSharpFunc<OlySyntaxNode, bool>))

#[open]
extension EnumerableExtensions<T> =
    inherits IEnumerable<T>

    OfType<U>(): IEnumerable<U> =
        System.Linq.Enumerable.OfType<U>(this)

generateQuery(text: string, mutable n: int32): string =
    if (n <= 1)
        fail("invalid generation")

    let text = text.Replace("EntityDatabaseQueryExtension1", "EntityDatabaseQuery1Extension" + n.ToString())

    let executeDef(text: string, defIndex: int32, defLength: int32) =
        let mutable spaceCount = 0
        let mutable hasNewLine = false
        let mutable i = 1
        while (!hasNewLine)
            let c = text.get_Chars(defIndex - i)
            if (c == '\n' || c == '\r')
                hasNewLine <- true
            else
                i <- i + 1
                spaceCount <- spaceCount + 1

        let spaces = string.Concat(initMutableArray(spaceCount, (_) -> " "))

        let defStr = text.Substring(defIndex, defLength)

        let gen(i: int32) =
            (defStr.Replace("/*def(n):", "").Replace("*/", "").Replace("{n}", (i + 2).ToString()))

        text.Remove(defIndex, defLength).Insert(defIndex, string.Join("\r\n" + spaces, initMutableArray(n - 1, i -> gen(i))))

    let mutable text = text
    let regex = System.Text.RegularExpressions.Regex("[\\/][*]def\\(n\\):.+[*][\\/]")
    let mutable m = regex.Match(text)
    while (m.Success)
        text <- executeDef(text, m.Index, m.Length)
        m <- regex.Match(text)
    text

main(): () =
    let text = File.ReadAllText("Collections/EntityQuery1.oly")

    // Do do not need to actually use Oly to parse, but do it anyway to test it.
    let syntaxTree = OlySyntaxTreeExtensions.`OlySyntaxTree.Parse.Static`(OlyPath.Create("EntityQuery1.oly"), text, null)
    if (syntaxTree.HasErrors)
        fail("syntax tree has errors")
    let text = (syntaxTree.GetSourceText(default): object).ToString()

    let mutable i = 2
    while (i <= 8)
        File.WriteAllText("Collections/EntityQuery" + (i.ToString()) + ".oly", generateQuery(text, i))
        i <- i + 1