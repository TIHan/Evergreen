#target "dotnet: net8"

#reference "C:/work/Oly/src/Compiler/Oly.Compiler.Syntax/Oly.Compiler.Syntax.fsproj"

open System
open System.IO
open System.Collections.Generic
open System.Collections.Immutable
open Microsoft.FSharp.Core
open Oly.Core
open Oly.Compiler
open Oly.Compiler.Syntax

#[open]
extension _OlySyntaxTreeExtensions =
    inherits OlySyntaxTree

    GetDescendants(filter: OlySyntaxNode -> bool): ImmutableArray<OlySyntaxNode> =
        class DescendantFilter =
            inherits FSharpFunc<OlySyntaxNode, bool>

            field f: OlySyntaxNode -> bool

            new(f: OlySyntaxNode -> bool) =
                base() with { f = f }
    
            overrides Invoke(node: OlySyntaxNode): bool =
                this.f(node)

        OlySyntaxTreeExtensions.`OlySyntaxNode.GetDescendants`(this.GetRoot(default), FSharpOption<_>.Some(DescendantFilter(filter): FSharpFunc<OlySyntaxNode, bool>))

#[open]
extension EnumerableExtensions<T> =
    inherits IEnumerable<T>

    OfType<U>(): IEnumerable<U> =
        System.Linq.Enumerable.OfType<U>(this)

generateQuery(text: string, mutable n: int32): string =
    if (n <= 1)
        fail("invalid generation")

    let typeArguments = "<" + string.Join(", ", initMutableArray(n, i -> "T" + (i + 1).ToString())) + ">"
    let byrefArguments = string.Join(", ", initMutableArray(n, i -> "byref<T" + (i + 1).ToString() + ">"))
    let spanArguments = string.Join(", ", initMutableArray(n, i -> "Span<T" + (i + 1).ToString() + ">"))

    let text = text.Replace("EntityQuery<T1>", "EntityQuery" + typeArguments)
    let text = text.Replace("GetArchetypeId<T1>()", "GetArchetypeId" + typeArguments + "()")
    let text = text.Replace("EntityDatabaseQuery1Extension", "EntityDatabaseQuery" + (n + 0).ToString() + "Extensions")
    let text = text.Replace("CreateQuery<T1>()", "CreateQuery" + typeArguments + "()")
    let text = text.Replace("(ReadOnlySpan<EntityId>, Span<T1>)", "(ReadOnlySpan<EntityId>, " + spanArguments + ")")
    let text = text.Replace("ForEachSpan<T1>", "ForEachSpan" + typeArguments)
    let text = text.Replace("ForEach<T1>", "ForEach" + typeArguments)
    let text = text.Replace("Create<T1>", "Create" + typeArguments)
    let text = text.Replace("(EntityId, byref<T1>)", "(EntityId, " + byrefArguments + ")")

    let executeDef(text: string, defStr: string) =
        let index = text.IndexOf(defStr)
        if (index == -1)
            text
        else
            let mutable spaceCount = 0
            let mutable hasNewLine = false
            let mutable i = 1
            while (!hasNewLine)
                let c = text.get_Chars(index - i)
                if (c == '\n' || c == '\r')
                    hasNewLine <- true
                else
                    i <- i + 1
                    spaceCount <- spaceCount + 1

            let spaces = string.Concat(initMutableArray(spaceCount, (_) -> " "))

            let gen(i: int32) =
                (defStr.Replace("/*def(n):", "").Replace("*/", "").Replace("{n}", (i + 2).ToString()))

            text.Replace(defStr, string.Join("\r\n" + spaces, initMutableArray(n - 1, i -> gen(i))))

    let defs =
        let regex = System.Text.RegularExpressions.Regex("[\\/][*]def\\(n\\):.+[*][\\/]")
        let mutable enumerator = regex.EnumerateMatches(ReadOnlySpan(text.ToCharArray()))
        let results = List<string>()
        while (enumerator.MoveNext())
            let mutable valueMatch = enumerator.Current
            results.Add(text.Substring(valueMatch.Index, valueMatch.Length))
        results

    let mutable text = text
    ForEach(defs, def -> text <- executeDef(text, def))
    text

main(): () =
    let text = File.ReadAllText("Collections/EntityQuery1.oly")

    // Do do not need to actually use Oly to parse, but do it anyway to test it.
    let syntaxTree = OlySyntaxTreeExtensions.`OlySyntaxTree.Parse.Static`(OlyPath.Create("EntityQuery1.oly"), text, null)
    if (syntaxTree.HasErrors)
        fail("syntax tree has errors")
    let text = (syntaxTree.GetSourceText(default): object).ToString()

    let mutable i = 2
    while (i <= 8)
        File.WriteAllText("Collections/EntityQuery" + (i.ToString()) + ".oly", generateQuery(text, i))
        i <- i + 1