namespace Evergreen.Database

open System
open System.Collections.Generic
open Evergreen.Utilities

#[open]
internal module Helpers1 =

    GetArchetypeId<T1
                     /*def(n):, T{n}*/>(): ArchetypeId 
            where T1: trait IComponent 
            /*def(n):where T{n}: trait IComponent*/
            = 
        T1.GetId()
                /*def(n):| T{n}.GetId()*/

class EntityQuery<T1
                    /*def(n):, T{n}*/> 
        where T1: blittable, struct, ValueType, { new() }
        /*def(n):where T{n}: blittable, struct, ValueType, { new() }*/
        =

    private ArchetypeCount: int32 get, set
    private GetArchetypeIndices: () -> int32[] get
    private ComponentIds: ComponentId[] get
    private ContainsArchetypeId: ArchetypeId get
    private NotContainsArchetypeId: ComponentId get

    internal Database      : EntityDatabase get
    internal ArchetypeGroup: Archetype[]       get, set
    internal EntIdGroup    : EntityIdStore[]   get, set
    internal BufferGroup1  : ComponentBuffer[] get, set
    /*def(n):internal BufferGroup{n}  : ComponentBuffer[] get, set*/

    internal new(
        database: EntityDatabase, 
        getArchetypeIndices: () -> int32[],
        componentIds: ComponentId[],
        containsArchetypeId: ArchetypeId,
        notContainsArchetypeId: ArchetypeId
    ) =
        this {
            ArchetypeCount = -1
            GetArchetypeIndices = getArchetypeIndices
            ComponentIds = componentIds
            ContainsArchetypeId = containsArchetypeId
            NotContainsArchetypeId = notContainsArchetypeId
            Database = database
            ArchetypeGroup = unchecked default
            EntIdGroup = unchecked default
            BufferGroup1 = unchecked default
            /*def(n):BufferGroup{n} = unchecked default*/
        }

    private RefreshIfNeeded(): () =
        if (this.Database.Archetypes.Count != this.ArchetypeCount)
            this.ArchetypeCount <- this.Database.Archetypes.Count
            let indices = this.GetArchetypeIndices()

            let archetypeGroup =  List()
            let entIdGroup = List()
            let bufferGroup1 = List()
            /*def(n):let bufferGroup{n} = List()*/

            let mutable i = 0
            while (i < indices.Length)
                let index = indices[i]
                let archetype = this.Database.GetArchetype(index)

                let fullId = archetype.FullId

                if (fullId.IsSupersetOf(this.ContainsArchetypeId) && !this.NotContainsArchetypeId.IsSupersetOf(fullId))
                    archetypeGroup.Add(archetype)
                    entIdGroup.Add(archetype.EntityIds)
                    bufferGroup1.Add(archetype.GetComponentBuffer(archetype.BufferLookup[this.ComponentIds[0]]))
                    /*def(n):bufferGroup{n}.Add(archetype.GetComponentBuffer(archetype.BufferLookup[this.ComponentIds[{n} - 1]]))*/

                i <- i + 1

            this.ArchetypeGroup <- Unsafe.AsImmutable(archetypeGroup.ToArray())
            this.EntIdGroup <- Unsafe.AsImmutable(entIdGroup.ToArray())
            this.BufferGroup1 <- Unsafe.AsImmutable(bufferGroup1.ToArray())
            /*def(n):this.BufferGroup{n} <- Unsafe.AsImmutable(bufferGroup{n}.ToArray())*/

    public WhereContains<T>(): EntityQuery<T1
                                             /*def(n):, T{n}*/>
            where T: blittable, struct, ValueType, { new() }, trait IComponent =
        EntityQuery(this.Database, this.GetArchetypeIndices, this.ComponentIds, this.ContainsArchetypeId | GetArchetypeId<T>(), this.NotContainsArchetypeId)

    public WhereNotContains<T>(): EntityQuery<T1
                                                /*def(n):, T{n}*/>
        where T: blittable, struct, ValueType, { new() }, trait IComponent =
            EntityQuery(this.Database, this.GetArchetypeIndices, this.ComponentIds, this.ContainsArchetypeId, this.NotContainsArchetypeId | GetArchetypeId<T>())

    #[inline]
    ForEachSpan(#[inline] f: scoped (ReadOnlySpan<EntityId>, Span<T1>
                                                                     /*def(n):, Span<T{n}>*/) -> ()): () =
        this.RefreshIfNeeded()

        let db = this.Database
        db.IncrementDepth()

        let archetypeGroup   = this.ArchetypeGroup
        let entIdGroup       = this.EntIdGroup
        let bufferGroup1     = this.BufferGroup1
        /*def(n):let bufferGroup{n}     = this.BufferGroup{n}*/

        let mutable i = 0
        while (i < archetypeGroup.Length)
            let archetype = archetypeGroup[i]
            let entIds = entIdGroup[i]
            let buffer1 = bufferGroup1[i].Store
            /*def(n):let buffer{n} = bufferGroup{n}[i].Store*/
            let count = archetype.Count

            let sliceCount = if (count == 0) 0 else (count / ComponentBuffer.MaxNumberOfEntitiesPerSlice) + 1
            let sliceNumber = ComponentBuffer.MaxNumberOfEntitiesPerSlice

            let mutable j = 0
            while (j < sliceCount)
                if (j == sliceCount - 1)
                    let start = j * sliceNumber
                    let length = count - start
                    f(
                        entIds.GetReadOnlyChunkAs(j).Slice(0, length),
                        buffer1.GetChunkAs(j).Slice(0, length)
                        /*def(n):, buffer{n}.GetChunkAs(j).Slice(0, length)*/
                    )
                else
                    f(
                        entIds.GetReadOnlyChunkAs(j),
                        buffer1.GetChunkAs(j)
                        /*def(n):, buffer{n}.GetChunkAs(j)*/
                    )
                j <- j + 1

            i <- i + 1
        db.DecrementDepth()

    #[inline]
    ForEach(#[inline] f: scoped (EntityId, byref<T1>
                                                    /*def(n):,  byref<T{n}>*/) -> ()): ()
            =
        this.ForEachSpan(
            (mutable entIds, 
                mutable buffer1
                /*def(n):, mutable buffer{n}*/
                ) ->
                let count = entIds.Length
                let mutable i = 0
                while (i < count)
                    f(
                        entIds[i], 
                        &buffer1[i]
                        /*def(n):, &buffer{n}[i]*/
                    )
                    i <- i + 1
        )
    

#[open]
extension EntityDatabaseQueryExtension1 =
    inherits EntityDatabase

    CreateQuery<T1
                  /*def(n):, T{n}*/>(): EntityQuery<T1
                                                      /*def(n):, T{n}*/> 
            where T1: blittable, struct, ValueType, { new() }, trait IComponent
            /*def(n):where T{n}: blittable, struct, ValueType, { new() }, trait IComponent*/
            =
        let archetypeId =
            GetArchetypeId<T1
                             /*def(n):, T{n}*/>()
        let getArchetypeIndices = () -> this.GetArchetypedIndices(archetypeId)

        let componentIds =
            [
                T1.GetId()
                /*def(n):T{n}.GetId()*/
            ]

        EntityQuery(
            this,
            getArchetypeIndices,
            componentIds,
            default,
            default
        )

    #[inline]
    TryGet<T1
             /*def(n):, T{n}*/>(entId: EntityId, #[inline] callback: scoped (byref<T1>
                                                                                   /*def(n):, byref<T{n}>*/) -> ()): bool 
            where T1: blittable, struct, ValueType, { new() }, trait IComponent 
            /*def(n):where T{n}: blittable, struct, ValueType, { new() }, trait IComponent*/
            =
        let index = this.entityArchetypeIndices[entId.Index]
        if (index == -1)
            false
        else
            let archetype = this.GetArchetype(index)
            let tyIndex1 = T1.GetIndex()
            /*def(n):let tyIndex{n} = T{n}.GetIndex()*/
            let fullId = archetype.FullId
            if (fullId.IsSet(tyIndex1) 
                                       /*def(n):&& fullId.IsSet(tyIndex{n})*/)
                let lookup = this.entityIndexLookup
                this.IncrementDepth()
                callback(
                    &archetype.Get(archetype.BufferLookupByIndex[tyIndex1], lookup[entId.Index])
                    /*def(n):, &archetype.Get(archetype.BufferLookupByIndex[tyIndex{n}], lookup[entId.Index])*/
                )
                this.DecrementDepth()
                true
            else
                false

    #[inline]
    IfHas<T1
            /*def(n):, T{n}*/>(entId: EntityId, #[inline] callback: scoped (byref<T1>
                                                                                     /*def(n):, byref<T{n}>*/) -> ()): () 
            where T1: blittable, struct, ValueType, { new() }, trait IComponent 
            /*def(n):where T{n}: blittable, struct, ValueType, { new() }, trait IComponent*/
            =
        let _ = this.TryGet(entId, callback)

    Has<T1
          /*def(n):, T{n}*/>(entId: EntityId): bool 
            where T1: blittable, struct, ValueType, { new() }, trait IComponent 
            /*def(n):where T{n}: blittable, struct, ValueType, { new() }, trait IComponent*/
            =
        let index = this.entityArchetypeIndices[entId.Index]
        if (index == -1)
            false
        else
            let archetype = this.GetArchetype(index)
            let fullId = archetype.FullId
            fullId.IsSet(T1.GetIndex())
                /*def(n):&& fullId.IsSet(T{n}.GetIndex())*/

    Exists<T1
             /*def(n):, T{n}*/>(entId: EntityId, condition: scoped (inref<T1>
                                                                             /*def(n):, inref<T{n}>*/) -> bool): bool 
            where T1: blittable, struct, ValueType, { new() }, trait IComponent 
            /*def(n):where T{n}: blittable, struct, ValueType, { new() }, trait IComponent*/
            =
        let mutable result = false
        let _ = this.TryGet<T1
                           /*def(n):, T{n}*/>(entId, (component1
                                                               /*def(n):, component{n}*/) -> 
                                                        result <- condition(&component1
                                                                           /*def(n):, &component{n}*/)
                                             )
        result

#[open]
extension UnlockedEntityDatabaseQueryExtension1 =
    inherits UnlockedEntityDatabase

    Create<T1
             /*def(n):, T{n}*/>(component1: T1
            /*def(n):, component{n}: T{n}*/): EntityId 
            where T1: blittable, struct, ValueType, { new() }, trait IComponent
            /*def(n):where T{n}: blittable, struct, ValueType, { new() }, trait IComponent*/
            =
        this.Create(&component1
                    /*def(n):, &component{n}*/)
    Create<T1
             /*def(n):, T{n}*/>(component1: inref<T1>
            /*def(n):, component{n}: inref<T{n}>*/): EntityId 
            where T1: blittable, struct, ValueType, { new() }, trait IComponent
            /*def(n):where T{n}: blittable, struct, ValueType, { new() }, trait IComponent*/
            =
        this.ThrowIfParallelDepth()

        let lookup = this.entityIndexLookup

        let archetypeId = GetArchetypeId<T1
                                           /*def(n):, T{n}*/>()
        let archetypedIndex = this.GetArchetypedIndex(archetypeId)
        let typedIndex1 = this.GetTypedIndex<T1>(archetypedIndex)
        /*def(n):let typedIndex{n} = this.GetTypedIndex<T{n}>(archetypedIndex)*/

        let entId = this.NewEntityId(archetypedIndex)

        let archetype = this.GetArchetype(archetypedIndex)
        let index = archetype.Count
        archetype.Count <- index + 1
        lookup[entId.Index] <- index
        archetype.EntityIds.SetAs(index, entId)

        archetype.ClearComponentAttachmentsAt(index)

        archetype.Set(typedIndex1, index, component1)
        /*def(n):archetype.Set(typedIndex{n}, index, component{n})*/

        this.IncrementDepth()
        archetype.TriggerComponentAdded(archetype.FullId, index)
        this.DecrementDepth()

        entId