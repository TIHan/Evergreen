namespace Evergreen.Database

open System
open System.IO
open System.Text
open System.Text.Json
open System.Numerics
open System.Diagnostics
open System.Collections.Generic
open System.Collections.Concurrent
open System.Runtime.InteropServices

open Evergreen.Utilities

struct EntityId =
    public field mutable Index: int32 = 0
    public field mutable Version: uint32 = 0

    IsNil: bool get() = this.Version == 0

    overrides mutable ToString(): string = 
        "<" + this.Index.ToString() + ", " + this.Version.ToString() + ">"

    Encode(): uint64 =
        let mutable value = uint64(this.Index)
        value <- value | (uint64(this.Version) << 32)
        value

    static Decode(value: uint64): EntityId =
        let index = int32((value << 32) >> 32)
        let version = uint32(value >> 32)
        let mutable entId = EntityId()
        entId.Index <- index
        entId.Version <- version
        entId

    static Nil: EntityId get = EntityId()

    static op_Equality(entId1: EntityId, entId2: EntityId): bool =
        entId1.Index == entId2.Index && entId1.Version == entId2.Version

    static op_Inequality(entId1: EntityId, entId2: EntityId): bool =
        entId1.Index != entId2.Index || entId1.Version != entId2.Version

    static Comparer: IEqualityComparer<EntityId> get =
        class Impl =
            implements IEqualityComparer<EntityId>

            GetHashCode(entityId: EntityId): int32 = entityId.Index

            Equals(entityId1: EntityId, entityId2: EntityId): bool =
                entityId1.Version == entityId2.Version
        Impl()

    static Write(stream: ByteStream, entId: EntityId): () =
        stream.Write<uint16>(uint16(entId.Index))
        stream.Write<uint32>(entId.Version)

    static Read(stream: ByteStream): EntityId =
        let mutable entId = EntityId()
        entId.Index <- int32(stream.Read<uint16>())
        entId.Version <- stream.Read<uint32>()
        entId

alias ComponentId = BitSet512

alias JsonFieldWriteMappings = Dictionary<string, (fieldName: string, fieldType: Type, src: ReadOnlySpan<byte>, Utf8JsonWriter) -> ()>

alias JsonFieldReadMappings = Dictionary<string, (mappedFieldName: string, componentType: Type, dst: Span<byte>, byref<Utf8JsonReader>) -> string>

interface IComponent =

    static abstract GetName(): string

    static abstract GetIndex(): int32

    static abstract GetId(): ComponentId

    static abstract GetSize(): int32

    static abstract GetType(): Type

    static abstract SerializeDeltaForNetwork(prevSrc: ReadOnlySpan<byte>, src: ReadOnlySpan<byte>, bstream: ByteStream): ()

    static abstract DeserializeDeltaForNetwork(bstream: ByteStream, dst: Span<byte>): ()

interface IComponent<N, T> where N: constant int32 where T: blittable, struct, ValueType, { new() } =
    inherits IComponent

    static overrides GetIndex(): int32 = N

    static overrides GetId(): ComponentId = BitSet512.FromIndex(N)

    static overrides GetType(): Type = DotNet.TypeOf<T>

    static overrides GetSize(): int32 = DotNet.SizeOf<T>

    static overrides GetName(): string = (DotNet.TypeOf<T>).Name

    static overrides SerializeDeltaForNetwork(prevSrc: ReadOnlySpan<byte>, src: ReadOnlySpan<byte>, bstream: ByteStream): () =
        bstream.Write(src)

    static overrides DeserializeDeltaForNetwork(bstream: ByteStream, dst: Span<byte>): () =
        bstream.Read(dst)

internal newtype DeserializeArchetypeIdAdapterState =
    internal field Value: Dictionary<int32, int32>

    static Create(): DeserializeArchetypeIdAdapterState = DeserializeArchetypeIdAdapterState(Dictionary())

    Reset(): () =
        this.Value.Clear()

module BuiltInComponents =

    struct ServerSide =
        implements IComponent<0, ServerSide>

    struct ClientSide =
        implements IComponent<1, ClientSide>

enum EntityDatabaseKind =
    | Server
    | Client

internal module TypeHelpers =

    field Vector2: Type = DotNet.TypeOf<Vector2>
    field Vector3: Type = DotNet.TypeOf<Vector3>
    field Vector4: Type = DotNet.TypeOf<Vector4>
    field Quaternion: Type = DotNet.TypeOf<Quaternion>
    field Matrix4x4: Type = DotNet.TypeOf<Matrix4x4>
    field Byte: Type = DotNet.TypeOf<byte>
    field SByte: Type = DotNet.TypeOf<int8>
    field UShort: Type = DotNet.TypeOf<uint16>
    field Short: Type = DotNet.TypeOf<int16>
    field UInt: Type = DotNet.TypeOf<uint32>
    field Int: Type = DotNet.TypeOf<int32>
    field ULong: Type = DotNet.TypeOf<uint64>
    field Long: Type = DotNet.TypeOf<int64>
    field Float: Type = DotNet.TypeOf<float32>
    field Double: Type = DotNet.TypeOf<float64>
    field EntityIdType: Type = DotNet.TypeOf<EntityId>

    private GetEnumValue(enumTy: Type, span: ReadOnlySpan<byte>): object =
        let ty = enumTy.GetEnumUnderlyingType()
        if (ty == TypeHelpers.Byte)
            let value = MemoryMarshal.Cast<byte, byte>(span)[0]
            Enum.ToObject(enumTy, value)
        else if (ty == TypeHelpers.SByte)
            let value = MemoryMarshal.Cast<byte, int8>(span)[0]
            Enum.ToObject(enumTy, value)
        else if (ty == TypeHelpers.UShort)
            let value = MemoryMarshal.Cast<byte, uint16>(span)[0]
            Enum.ToObject(enumTy, value)
        else if (ty == TypeHelpers.Short)
            let value = MemoryMarshal.Cast<byte, int16>(span)[0]
            Enum.ToObject(enumTy, value)
        else if (ty == TypeHelpers.UInt)
            let value = MemoryMarshal.Cast<byte, uint32>(span)[0]
            Enum.ToObject(enumTy, value)
        else if (ty == TypeHelpers.Int)
            let value = MemoryMarshal.Cast<byte, int32>(span)[0]
            Enum.ToObject(enumTy, value)
        else if (ty == TypeHelpers.ULong)
            let value = MemoryMarshal.Cast<byte, uint64>(span)[0]
            Enum.ToObject(enumTy, value)
        else if (ty == TypeHelpers.Long)
            let mutable value = MemoryMarshal.Cast<byte, int64>(span)[0]
            Enum.ToObject(enumTy, value)
        else
            fail("Invalid underlying enum type")

    ReadStartObject(reader: byref<Utf8JsonReader>): () =
        if (reader.TokenType != JsonTokenType.StartObject)
            fail("Expected start object")
        let _ = reader.Read()

    ReadEndObject(reader: byref<Utf8JsonReader>): () =
        if (reader.TokenType != JsonTokenType.EndObject)
            fail("Expected start object")
        let _ = reader.Read()

    IsNextObjectQuaternion(reader: byref<Utf8JsonReader>): bool =
        let prevReader = reader
        ReadStartObject(&reader)
        match (reader.TokenType)
        | JsonTokenType.PropertyName =>
            let propName = reader.GetString()
            reader <- prevReader
            propName == "W"
        | _ =>
            reader <- prevReader
            false

    Read<T>(isStrict: bool, mutable span: Span<byte>, reader: byref<Utf8JsonReader>, f: scoped (propName: string, byref<T>, byref<Utf8JsonReader>) -> ()): () where T: blittable, struct, ValueType, { new() } =
        let expectedProps = HashSet<string>()
        let ty = DotNet.TypeOf<T>
        ForEach(ty.GetFields(),
            fieldInfo ->
                let _ = expectedProps.Add(fieldInfo.Name)
        )
        
        let actualProps = HashSet<string>()

        ReadStartObject(&reader)

        let value = &MemoryMarshal.Cast<byte, T>(span)[0]
        while (reader.TokenType != JsonTokenType.EndObject)
            match (reader.TokenType)
            | JsonTokenType.PropertyName =>
                let propName = reader.GetString()
                let _ = actualProps.Add(propName)
                //if (actualProps.Add(propName))
                  //  fail("Duplicate property defined: " + propName)
                let _ = reader.Read()
                f(propName, &value, &reader)
                let _ = reader.Read()
            | _ =>
                fail("Invalid json token type")
        
        ReadEndObject(&reader)

        if (isStrict)
            expectedProps.ExceptWith(actualProps)
            if (expectedProps.Count > 0)
                let strBuilder = StringBuilder()
                ForEach(expectedProps,
                    propName ->
                        let _ = strBuilder.Append(propName + "\n")
                )
                fail("Missing properties for type '" + ty.Name + "':\n" + strBuilder.ToString())

    Read(isStrict: bool, nameToIndex: Dictionary<string, int32>, lookup: JsonFieldReadMappings, ty: Type, mutable span: Span<byte>, reader: byref<Utf8JsonReader>): () =
        if (ty == TypeHelpers.EntityIdType && nameToIndex.Count > 0)
            fail("not ready yet")
        else if (ty == TypeHelpers.Vector2)
            Read<Vector2>(isStrict, span, &reader,
                (propName, value, reader) ->
                    match (propName)
                    | "X" => value.X <- reader.GetSingle()
                    | "Y" => value.Y <- reader.GetSingle()
                    | _ => fail("Unexpected property")
            )
        else if (ty == TypeHelpers.Vector3)
            Read<Vector3>(isStrict, span, &reader,
                (propName, value, reader) ->
                    match (propName)
                    | "X" => value.X <- reader.GetSingle()
                    | "Y" => value.Y <- reader.GetSingle()
                    | "Z" => value.Z <- reader.GetSingle()
                    | _ => fail("Unexpected property")
            )
        else if (ty == TypeHelpers.Vector4)
            Read<Vector4>(isStrict, span, &reader,
                (propName, value, reader) ->
                    match (propName)
                    | "X" => value.X <- reader.GetSingle()
                    | "Y" => value.Y <- reader.GetSingle()
                    | "Z" => value.Z <- reader.GetSingle()
                    | "W" => value.W <- reader.GetSingle()
                    | _ => fail("Unexpected property")
            )
        else if (ty == TypeHelpers.Quaternion)
            if (IsNextObjectQuaternion(&reader))
                Read<Quaternion>(isStrict, span, &reader,
                    (propName, value, reader) ->
                        match (propName)
                        | "X" => value.X <- reader.GetSingle()
                        | "Y" => value.Y <- reader.GetSingle()
                        | "Z" => value.Z <- reader.GetSingle()
                        | "W" => value.W <- reader.GetSingle()
                        | _ => fail("Unexpected property")
                )
            else
                Read<Vector3>(isStrict, span, &reader,
                    (propName, value, reader) ->
                        match (propName)
                        | "X" => value.X <- reader.GetSingle()
                        | "Y" => value.Y <- reader.GetSingle()
                        | "Z" => value.Z <- reader.GetSingle()
                        | _ => fail("Unexpected property")
                )
                let value = MemoryMarshal.Cast<byte, Vector3>(span)[0]
                let realValue = &MemoryMarshal.Cast<byte, Quaternion>(span)[0]
                let mX = System.Numerics.Matrix4x4.CreateRotationX(radians(value.X))
                let mY = System.Numerics.Matrix4x4.CreateRotationY(radians(value.Y))
                let mZ = System.Numerics.Matrix4x4.CreateRotationZ(radians(value.Z))
                realValue <- System.Numerics.Quaternion.CreateFromRotationMatrix(mX * mY * mZ)
        else if (ty == TypeHelpers.Matrix4x4)
            Read<Matrix4x4>(isStrict, span, &reader,
                (propName, value, reader) ->
                    match (propName)
                    | "M11" => value.M11 <- reader.GetSingle()
                    | "M12" => value.M12 <- reader.GetSingle()
                    | "M13" => value.M13 <- reader.GetSingle()
                    | "M14" => value.M14 <- reader.GetSingle()
                    | "M21" => value.M21 <- reader.GetSingle()
                    | "M22" => value.M22 <- reader.GetSingle()
                    | "M23" => value.M23 <- reader.GetSingle()
                    | "M24" => value.M24 <- reader.GetSingle()
                    | "M31" => value.M31 <- reader.GetSingle()
                    | "M32" => value.M32 <- reader.GetSingle()
                    | "M33" => value.M33 <- reader.GetSingle()
                    | "M34" => value.M34 <- reader.GetSingle()
                    | "M41" => value.M41 <- reader.GetSingle()
                    | "M42" => value.M42 <- reader.GetSingle()
                    | "M43" => value.M43 <- reader.GetSingle()
                    | "M44" => value.M44 <- reader.GetSingle()
                    | _ => fail("Unexpected property")
            )
        else if (ty == TypeHelpers.Byte)            
            let value = &MemoryMarshal.Cast<byte, byte>(span)[0]
            value <- reader.GetByte()
            let _ = reader.Read()
        else if (ty == TypeHelpers.SByte)
            let value = &MemoryMarshal.Cast<byte, int8>(span)[0]
            value <- reader.GetSByte()
            let _ = reader.Read()
        else if (ty == TypeHelpers.UShort)
            let value = &MemoryMarshal.Cast<byte, uint16>(span)[0]
            value <- reader.GetUInt16()
            let _ = reader.Read()
        else if (ty == TypeHelpers.Short)
            let value = &MemoryMarshal.Cast<byte, int16>(span)[0]
            value <- reader.GetInt16()
            let _ = reader.Read()
        else if (ty == TypeHelpers.UInt)
            let value = &MemoryMarshal.Cast<byte, uint32>(span)[0]
            value <- reader.GetUInt32()
            let _ = reader.Read()
        else if (ty == TypeHelpers.Int)
            let value = &MemoryMarshal.Cast<byte, int32>(span)[0]
            value <- reader.GetInt32()
            let _ = reader.Read()
        else if (ty == TypeHelpers.ULong)
            let value = &MemoryMarshal.Cast<byte, uint64>(span)[0]
            value <- reader.GetUInt64()
            let _ = reader.Read()
        else if (ty == TypeHelpers.Long)
            let value = &MemoryMarshal.Cast<byte, int64>(span)[0]
            value <- reader.GetInt64()
            let _ = reader.Read()
        else if (ty == TypeHelpers.Float)
            let value = &MemoryMarshal.Cast<byte, float32>(span)[0]
            value <- reader.GetSingle()
            let _ = reader.Read()
        else if (ty == TypeHelpers.Double)
            let value = &MemoryMarshal.Cast<byte, float64>(span)[0]
            value <- reader.GetDouble()
            let _ = reader.Read()
        else if (ty.IsEnum)
            let name = reader.GetString()
            let valueObj = Enum.Parse(ty, name)
            let ty = ty.GetEnumUnderlyingType()
            if (ty == TypeHelpers.Byte)
                let value = &MemoryMarshal.Cast<byte, byte>(span)[0]
                value <- Convert.ToByte(valueObj)
            else if (ty == TypeHelpers.SByte)
                let value = &MemoryMarshal.Cast<byte, int8>(span)[0]
                value <- Convert.ToSByte(valueObj)
            else if (ty == TypeHelpers.UShort)
                let value = &MemoryMarshal.Cast<byte, uint16>(span)[0]
                value <- Convert.ToUInt16(valueObj)
            else if (ty == TypeHelpers.Short)
                let value = &MemoryMarshal.Cast<byte, int16>(span)[0]
                value <- Convert.ToInt16(valueObj)
            else if (ty == TypeHelpers.UInt)
                let value = &MemoryMarshal.Cast<byte, uint32>(span)[0]
                value <- Convert.ToUInt32(valueObj)
            else if (ty == TypeHelpers.Int)
                let value = &MemoryMarshal.Cast<byte, int32>(span)[0]
                value <- Convert.ToInt32(valueObj)
            else if (ty == TypeHelpers.ULong)
                let value = &MemoryMarshal.Cast<byte, uint64>(span)[0]
                value <- Convert.ToUInt64(valueObj)
            else if (ty == TypeHelpers.Long)
                let mutable value = &MemoryMarshal.Cast<byte, int64>(span)[0]
                value <- Convert.ToInt64(valueObj)
            else
                fail("Invalid underlying enum type")
            let _ = reader.Read()
        else
            let expectedProps = HashSet<string>()
            ForEach(ty.GetFields(),
                fieldInfo ->
                    let _ = expectedProps.Add(fieldInfo.Name)
            )
            
            let actualProps = HashSet<string>()

            ReadStartObject(&reader)
            while (reader.TokenType != JsonTokenType.EndObject)
                match (reader.TokenType)
                | JsonTokenType.PropertyName =>
                    let fldName = reader.GetString()
                    let _ = reader.Read()

                    let mutable read = unchecked default
                    if (lookup.TryGetValue(fldName, &read))
                        let realFldName = read(fldName, ty, span, &reader)
                        let _ = actualProps.Add(realFldName)
                        let _ = reader.Read()
                    else
                        let fld = ty.GetField(fldName)
                        if (fld !== null)
                            let fldTy = fld.FieldType
                
                            let size =
                                if (fldTy.IsEnum)
                                    Marshal.SizeOf(Enum.GetUnderlyingType(fldTy))
                                else
                                    Marshal.SizeOf(fldTy)

                            let offset = int32(Marshal.OffsetOf(ty, fldName))

                            let span = span.Slice(offset, size)
                            TypeHelpers.Read(isStrict, nameToIndex, lookup, fldTy, span, &reader)
                            let _ = actualProps.Add(fldName)
                        else
                            LogError("Unable to deserialize field '" + fldName + "'")
                            reader.Skip()
                            let _ = reader.Read()
                | _ =>
                    fail("Invalid json token type")
            ReadEndObject(&reader)

            if (isStrict)
                expectedProps.ExceptWith(actualProps)
                if (expectedProps.Count > 0)
                    let strBuilder = StringBuilder()
                    ForEach(expectedProps,
                        propName ->
                            // TODO: 'propName' is the actual field on the type, but not what is presented in JSON.
                            //       Ex: ImageId => Texture
                            //       We display "ImageId" if there is an error. Consider printing "Texture" instead.
                            let _ = strBuilder.Append(propName + "\n")
                    )
                    fail("Missing properties for type '" + ty.Name + "':\n" + strBuilder.ToString())

    Write(lookup: JsonFieldWriteMappings, ty: Type, mutable span: ReadOnlySpan<byte>, writer: Utf8JsonWriter): () =
        if (ty == TypeHelpers.Vector2) 
            let value = MemoryMarshal.Cast<byte, Vector2>(span)[0]
            writer.WriteStartObject()
            writer.WritePropertyName("X")
            writer.WriteNumberValue(value.X)
            writer.WritePropertyName("Y")
            writer.WriteNumberValue(value.Y)
            writer.WriteEndObject()
        else if (ty == TypeHelpers.Vector3)
            let value = MemoryMarshal.Cast<byte, Vector3>(span)[0]
            writer.WriteStartObject()
            writer.WritePropertyName("X")
            writer.WriteNumberValue(value.X)
            writer.WritePropertyName("Y")
            writer.WriteNumberValue(value.Y)
            writer.WritePropertyName("Z")
            writer.WriteNumberValue(value.Z)
            writer.WriteEndObject()
        else if (ty == TypeHelpers.Vector4)
            let value = MemoryMarshal.Cast<byte, Vector4>(span)[0]
            writer.WriteStartObject()
            writer.WritePropertyName("X")
            writer.WriteNumberValue(value.X)
            writer.WritePropertyName("Y")
            writer.WriteNumberValue(value.Y)
            writer.WritePropertyName("Z")
            writer.WriteNumberValue(value.Z)
            writer.WritePropertyName("W")
            writer.WriteNumberValue(value.W)
            writer.WriteEndObject()
        else if (ty == TypeHelpers.Quaternion)
            let value = MemoryMarshal.Cast<byte, Quaternion>(span)[0]
            //let value = value.ToEulerAngles()
            writer.WriteStartObject()
            // writer.WritePropertyName("X")
            // writer.WriteNumberValue(snapWithinThreeDigits(degrees(value.X)))
            // writer.WritePropertyName("Y")
            // writer.WriteNumberValue(snapWithinThreeDigits(degrees(value.Y)))
            // writer.WritePropertyName("Z")
            // writer.WriteNumberValue(snapWithinThreeDigits(degrees(value.Z)))
            writer.WritePropertyName("W")
            writer.WriteNumberValue(value.W)
            writer.WritePropertyName("X")
            writer.WriteNumberValue(value.X)
            writer.WritePropertyName("Y")
            writer.WriteNumberValue(value.Y)
            writer.WritePropertyName("Z")
            writer.WriteNumberValue(value.Z)
            writer.WriteEndObject()
        else if (ty == TypeHelpers.Matrix4x4)
            let value = MemoryMarshal.Cast<byte, Matrix4x4>(span)[0]
            writer.WriteStartObject()

            writer.WritePropertyName("M11")
            writer.WriteNumberValue(value.M11)
            writer.WritePropertyName("M12")
            writer.WriteNumberValue(value.M12)
            writer.WritePropertyName("M13")
            writer.WriteNumberValue(value.M13)
            writer.WritePropertyName("M14")
            writer.WriteNumberValue(value.M14)

            writer.WritePropertyName("M21")
            writer.WriteNumberValue(value.M21)
            writer.WritePropertyName("M22")
            writer.WriteNumberValue(value.M22)
            writer.WritePropertyName("M23")
            writer.WriteNumberValue(value.M23)
            writer.WritePropertyName("M24")
            writer.WriteNumberValue(value.M14)

            writer.WritePropertyName("M31")
            writer.WriteNumberValue(value.M31)
            writer.WritePropertyName("M32")
            writer.WriteNumberValue(value.M32)
            writer.WritePropertyName("M33")
            writer.WriteNumberValue(value.M33)
            writer.WritePropertyName("M34")
            writer.WriteNumberValue(value.M34)

            writer.WritePropertyName("M41")
            writer.WriteNumberValue(value.M41)
            writer.WritePropertyName("M42")
            writer.WriteNumberValue(value.M42)
            writer.WritePropertyName("M43")
            writer.WriteNumberValue(value.M43)
            writer.WritePropertyName("M44")
            writer.WriteNumberValue(value.M14)

            writer.WriteEndObject()
        else if (ty == TypeHelpers.Byte)
            let mutable value = MemoryMarshal.Cast<byte, byte>(span)[0]
            writer.WriteNumberValue(uint32(value))
        else if (ty == TypeHelpers.SByte)
            let mutable value = MemoryMarshal.Cast<byte, int8>(span)[0]
            writer.WriteNumberValue(int32(value))
        else if (ty == TypeHelpers.UShort)
            let mutable value = MemoryMarshal.Cast<byte, uint16>(span)[0]
            writer.WriteNumberValue(uint32(value))
        else if (ty == TypeHelpers.Short)
            let mutable value = MemoryMarshal.Cast<byte, int16>(span)[0]
            writer.WriteNumberValue(int32(value))
        else if (ty == TypeHelpers.UInt)
            let mutable value = MemoryMarshal.Cast<byte, uint32>(span)[0]
            writer.WriteNumberValue(value)
        else if (ty == TypeHelpers.Int)
            let mutable value = MemoryMarshal.Cast<byte, int32>(span)[0]
            writer.WriteNumberValue(value)
        else if (ty == TypeHelpers.ULong)
            let mutable value = MemoryMarshal.Cast<byte, uint64>(span)[0]
            writer.WriteNumberValue(value)
        else if (ty == TypeHelpers.Long)
            let mutable value = MemoryMarshal.Cast<byte, int64>(span)[0]
            writer.WriteNumberValue(value)
        else if (ty == TypeHelpers.Float)
            let mutable value = MemoryMarshal.Cast<byte, float32>(span)[0]
            writer.WriteNumberValue(value)
        else if (ty == TypeHelpers.Double)
            let mutable value = MemoryMarshal.Cast<byte, float64>(span)[0]
            writer.WriteNumberValue(value)
        else if (ty.IsEnum)
            writer.WriteStringValue(GetEnumValue(ty, span).ToString())
        else
            writer.WriteStartObject()
            let fields = filter(ty.GetFields(), x -> !x.IsStatic)
            ForEach(fields,
                fld ->
                    let fldName = fld.Name

                    let fldTy = fld.FieldType
        
                    let size =
                        if (fldTy.IsEnum)
                            Marshal.SizeOf(Enum.GetUnderlyingType(fldTy))
                        else
                            Marshal.SizeOf(fldTy)

                    let offset = int32(Marshal.OffsetOf(ty, fldName))
    
                    let span = span.Slice(offset, size)

                    let mutable write = unchecked default
                    if (lookup.TryGetValue(fldName, &write))
                        write(fldName, fldTy, span, writer)
                    else
                        writer.WritePropertyName(fldName)
                        TypeHelpers.Write(lookup, fld.FieldType, span, writer)
            )
            writer.WriteEndObject()

    ReadEntityId(json: byref<Utf8JsonReader>): EntityId =
        let mutable entId = EntityId.Nil
        ReadStartObject(&json)
        if (json.TokenType != JsonTokenType.PropertyName)
            fail("Expected PropertyName")
        let _ = json.Read()
        entId.Index <- json.GetInt32()
        let _ = json.Read()
        if (json.TokenType != JsonTokenType.PropertyName)
            fail("Expected PropertyName")
        let _ = json.Read()
        entId.Version <- json.GetUInt32()
        let _ = json.Read()
        ReadEndObject(&json)
        entId

    TryReadPropertyEntityId(propName: string, json: byref<Utf8JsonReader>, outEntId: byref<EntityId>): bool =
        if (json.TokenType != JsonTokenType.PropertyName)
            false
        else
            ()
            if (json.GetString() != propName)
                false
            else
                let _ = json.Read()
                outEntId <- ReadEntityId(&json)
                true

    WriteEntity(json: byref<Utf8JsonWriter>, entId: EntityId): () =
        json.WriteStartObject()
        json.WritePropertyName("Index")
        json.WriteNumberValue(entId.Index)
        json.WritePropertyName("Version")
        json.WriteNumberValue(entId.Version)
        json.WriteEndObject()

alias ArchetypeId = BitSet512

#[open]
internal module Helpers =

    GetComponentIds(archetypeId: ArchetypeId): ComponentId[] =
        let bytes = archetypeId.ToBytes()

        // TODO: Do we need to optimize this?
        let bitArray = System.Collections.BitArray(bytes)
        let tyIds = List<ComponentId>()            
        let mutable i = 0
        while (i < bitArray.Count)
            if (bitArray.Get(i))
                tyIds.Add(BitSet512.FromIndex(i))
            i <- i + 1
        Unsafe.AsImmutable(tyIds.ToArray())

internal class ChunkedItemStore<MaxItemCount, ItemsPerChunk> 
        where MaxItemCount: constant int32
        where ItemsPerChunk: constant int32 =

    field chunks: mutable (mutable byte[])[]
    field mutable chunkCount: int32

    ItemSize: int32 get
    Length: int32
        get() =
            if (this.chunkCount == 0)
                0
            else
                let mutable length = 0
                For(this.chunkCount,
                    i ->
                        let chunk = this.chunks[i]
                        length <- length + chunk.Length
                )
                length

    new(itemSize: int32) =
        {
            ItemSize = itemSize
            chunks = zeroArray(MaxItemCount / ItemsPerChunk)
            chunkCount = 0
        }

    EnsureCapacity(count: int32): () =
        if (count > (this.chunkCount * ItemsPerChunk))
            this.chunks[this.chunkCount] <- zeroArray(this.ItemSize * ItemsPerChunk)
            this.chunkCount<- this.chunkCount + 1
            this.EnsureCapacity(count)

    private GetChunkByItemIndex(index: int32): mutable byte[] =
        this.chunks[index / ItemsPerChunk]

    Clear(): () =
        let mutable i = 0
        while (i < this.chunkCount)
            Span(this.chunks[i]).Clear()
            i <- i + 1 

    ClearAt(index: int32): () =
        Span(this.GetChunkByItemIndex(index), (index % ItemsPerChunk) * this.ItemSize, this.ItemSize).Clear()

    CopyTo(dst: ChunkedItemStore<MaxItemCount, ItemsPerChunk>, count: int32): () =
        if (count > 0)
            let chunkCount = (count / ItemsPerChunk) + 1

            let mutable remainingCount = count

            let mutable i = 0
            while (i < chunkCount)
                if (i == chunkCount - 1)
                    let size = remainingCount * this.ItemSize
                    Span(this.chunks[i], 0, size).CopyTo(Span(dst.chunks[i]))
                else
                    remainingCount <- remainingCount - ItemsPerChunk
                    Span(this.chunks[i], 0, ItemsPerChunk * this.ItemSize).CopyTo(Span(dst.chunks[i]))
                i <- i + 1

    CopyOneTo(srcIndex: int32, dst: ChunkedItemStore<MaxItemCount, ItemsPerChunk>, dstIndex: int32): () =
        Span(this.GetChunkByItemIndex(srcIndex), (srcIndex % ItemsPerChunk) * this.ItemSize, this.ItemSize).CopyTo(Span(dst.GetChunkByItemIndex(dstIndex), (dstIndex % ItemsPerChunk) * this.ItemSize, this.ItemSize))

    GetChunkAs<T>(chunkIndex: int32): Span<T> where T: blittable, struct, ValueType, { new() } =
        MemoryMarshal.Cast<byte, T>(Span(this.chunks[chunkIndex]))

    GetReadOnlyChunkAs<T>(chunkIndex: int32): ReadOnlySpan<T> where T: blittable, struct, ValueType, { new() } =
        Span<_>.op_Implicit(MemoryMarshal.Cast<byte, T>(Span(this.chunks[chunkIndex])))

    GetAs<T>(index: int32): byref<T> where T: blittable, struct, ValueType, { new() } =
        &MemoryMarshal.Cast<byte, T>(Span(this.GetChunkByItemIndex(index)))[index % ItemsPerChunk]

    SetAs<T>(index: int32, item: T): () where T: blittable, struct, ValueType, { new() } =
        this.GetAs<T>(index) <- item

    Get(index: int32): Span<byte> =
        Span(this.GetChunkByItemIndex(index), (index % ItemsPerChunk) * this.ItemSize, this.ItemSize)

    ForEachChunk(lengthInBytes: int32, f: scoped (Span<byte>, count: int32) -> ()): () =
        if (lengthInBytes > 0)
            let count = (lengthInBytes / this.ItemSize)
            let sliceCount = (count / ItemsPerChunk) + 1

            let mutable remainingCount = count

            let mutable i = 0
            while (i < sliceCount)
                if (i == sliceCount - 1)
                    let size = remainingCount * this.ItemSize
                    f(Span(this.chunks[i], 0, size), size / this.ItemSize)
                else
                    remainingCount <- remainingCount - ItemsPerChunk
                    f(Span(this.chunks[i], 0, ItemsPerChunk * this.ItemSize), ItemsPerChunk)
                i <- i + 1
            

    ForEachChunk2(store2: ChunkedItemStore<MaxItemCount, ItemsPerChunk>, lengthInBytes: int32, f: scoped (Span<byte>, Span<byte>, count: int32) -> ()): () =
        if (lengthInBytes > 0)
            let count = (lengthInBytes / this.ItemSize)
            let sliceCount = (count / ItemsPerChunk) + 1

            let mutable remainingCount = count

            let mutable i = 0
            while (i < sliceCount)
                if (i == sliceCount - 1)
                    let size = remainingCount * this.ItemSize
                    f(Span(this.chunks[i], 0, size), Span(store2.chunks[i], 0, size), size / this.ItemSize)
                else
                    remainingCount <- remainingCount - ItemsPerChunk
                    let size = ItemsPerChunk * this.ItemSize
                    f(Span(this.chunks[i], 0, size), Span(store2.chunks[i], 0, size), ItemsPerChunk)
                i <- i + 1

internal class ComponentBuffer =

    static MaxNumberOfEntitiesPerSlice: int32 get() = 128
    
    Store: ChunkedItemStore<65536, 128> get
    ComponentName: string get
    ComponentId: ComponentId get
    ComponentIndex: int32 get
    Type: Type get

    SerializeDeltaForNetwork: SerializeDeltaForNetworkFunction get
    DeserializeDeltaForNetwork: DeserializeDeltaForNetworkFunction get

    new(typeId: ComponentId, index: int32, typeSize: int32, ty: Type, compName: string, serializeDeltaForNetwork: SerializeDeltaForNetworkFunction, deserializeDeltaForNetwork: DeserializeDeltaForNetworkFunction) =
        {          
            Store = ChunkedItemStore(typeSize)
            ComponentId = typeId
            ComponentIndex = index
            ComponentName = compName
            Type = ty
            SerializeDeltaForNetwork = serializeDeltaForNetwork
            DeserializeDeltaForNetwork = deserializeDeltaForNetwork
            ComponentAdded = Event()
            ComponentRemoving = Event()
        }

    ComponentAdded: Event<int32> get
    ComponentRemoving: Event<int32> get

alias EntityIdStore = ChunkedItemStore<65536, 128>