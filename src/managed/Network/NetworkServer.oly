namespace Evergreen.Network

open System
open System.IO
open System.IO.Compression
open System.Buffers
open System.Net
open System.Net.Sockets
open System.Collections.Generic
open System.Collections.Concurrent
open System.Runtime.InteropServices
open System.Security.Cryptography

open Evergreen.Utilities

struct NetworkServerStatistics =
    public field mutable LastSentByteCount: uint64 = 0
    public field mutable PacketCountSinceHeartbeat: int32 = 0

class NetworkServer =
    implements IDisposable

    field iv: Encryption.IV
    field endPointsToDisconnect: HashSet<IPEndPoint>
    field socket: Socket
    field encryption: Encryption
    field connections: ConcurrentDictionary<IPEndPoint, Connection>
    field onConnectionRequested: IPEndPoint -> bool
    field onConnectionRefused: (IPEndPoint, ClientDisconnectReason) -> ()
    field onClientConnected: IPEndPoint -> ()
    field onClientDisconnected: (IPEndPoint, ClientDisconnectReason) -> ()
    field onMessageReceived: (IPEndPoint, ByteStream, channel: byte) -> ()
    field mutable connectionKey: string 
    field mutable isStarted: bool
    field mutable timeSinceStart: float32
    field clientTimeout: float32

    field mutable stats: NetworkServerStatistics

    field lagRandom: Random
    field mutable lagQueue: Queue<LagSimulatedPacket>
    LatencySimulationRange: (uint16, uint16) get, set
    PacketLossSimulationRate: byte get, set

    private DisconnectQueue: ConcurrentQueue<IPEndPoint> get
    private ReceivePacketPool: PacketPool get

    static StartSocket(socket: Socket, port: int32): bool =
        let bind(port) =
            try
                // This prevents the server from receiving a socket exception when a client disconnects.
                // This is windows specific.
                let _ = socket.IOControl(/* SIO_UDP_CONNRESET */ -1744830452, mutable [0: byte;0;0;0], unchecked default)
               // socket.Bind(IPEndPoint(IPAddress.Any, port))
                socket.Bind(IPEndPoint(IPAddress.Parse("127.0.0.1"), port))
                true
            catch (ex: Exception) =>
                false

        if (!bind(port))
            if (!bind(port + 1))
                if (!bind(port + 2))
                    false
                else
                    true
            else
                true
        else
            true

    new(desiredPort: int32,
        onConnectionRequested: IPEndPoint -> bool,
        onConnectionRefused: (IPEndPoint, ClientDisconnectReason) -> (),
        onClientConnected: IPEndPoint -> (),
        onClientDisconnected: (IPEndPoint, ClientDisconnectReason) -> (),
        onMessageReceived: (IPEndPoint, ByteStream, channel: byte) -> ()) = 
        if (desiredPort <= 0)
            throw ArgumentOutOfRangeException("desiredPort")
        { 
            iv = Encryption.IV.Create()
            endPointsToDisconnect = HashSet()
            socket =
                let socket = Socket(SocketType.Dgram, ProtocolType.Udp)
                socket.Blocking <- false
                socket.ReceiveBufferSize <- 0
                if (!StartSocket(socket, desiredPort))
                    fail("Failed to start server socket")
                socket
            encryption = Encryption()
            connections = ConcurrentDictionary()
            onConnectionRequested = onConnectionRequested
            onConnectionRefused = onConnectionRefused
            onClientConnected = onClientConnected
            onClientDisconnected = onClientDisconnected
            onMessageReceived = onMessageReceived
            connectionKey = ""
            isStarted = false
            timeSinceStart = 0
            clientTimeout = 6 // seconds
            stats = NetworkServerStatistics()

            lagRandom = Random()
            lagQueue = Queue()
            LatencySimulationRange = (0, 0)
            PacketLossSimulationRate = 0

            DisconnectQueue = ConcurrentQueue()
            ReceivePacketPool = PacketPool(1024)
        }

    private EndPoint: IPEndPoint get() = Unsafe.Cast(this.socket.LocalEndPoint)

    Port: int32 get() = this.EndPoint.Port
    Statistics: NetworkServerStatistics get() = this.stats
    IsStarted: bool get() = this.isStarted

    private SendPacket(packet: Packet): () =
        if (packet.IsInPool)
            throw InvalidOperationException("Cannot send packet that is in the packet pool")
        this.stats.LastSentByteCount <- uint64(this.encryption.SendPacket(this.socket, packet, this.iv)) + this.stats.LastSentByteCount
        this.stats.PacketCountSinceHeartbeat <- this.stats.PacketCountSinceHeartbeat + 1

    private SendConnectionAccepted(endPoint: EndPoint): () =
        let packet = Packet.CreateConnectionAccepted(this.iv, Unsafe.Cast(endPoint))
        this.SendPacket(packet)

    private SendHeartbeat(endPoint: EndPoint): () =
        let packet = Packet.CreateHeartbeat(Unsafe.Cast(endPoint))
        this.SendPacket(packet)

    Disconnect(endPoint: IPEndPoint, reason: ClientDisconnectReason): () =
        let mutable connection = unchecked default
        if (this.connections.TryRemove(endPoint, &connection))
            let packet = Packet.CreateDisconnect(Unsafe.Cast(endPoint))
            // TODO: Should we send this multiple times?
            try
                this.SendPacket(packet)
            catch (ex: Exception) =>
                ()
            if (connection.PacketFactory !== null)
                this.onClientDisconnected(endPoint, reason)
            else
                let packet = Packet.CreateServerConnectionRefused(endPoint, reason)
                // TODO: Should we send this multiple times?
                try
                    this.SendPacket(packet)
                catch (ex: Exception) =>
                    ()
                this.onConnectionRefused(endPoint, reason)
        else
            let packet = Packet.CreateServerConnectionRefused(endPoint, reason)
            // TODO: Should we send this multiple times?
            try
                this.SendPacket(packet)
            catch (ex: Exception) =>
                ()
            this.onConnectionRefused(endPoint, reason)

    private ReceivePacket(): (Packet, numberOfBytesReadFromSocket: int32) =
        let mutable packet = this.ReceivePacketPool.Rent()
        let mutable endPoint = IPEndPoint(IPAddress.Any, this.Port): EndPoint
        let numberOfBytesReadFromSocket = 
            try
                this.encryption.ReceivePacket(this.socket, this.Port, this.iv, packet)
            catch (ex: SocketException) =>
                if (ex.SocketErrorCode != SocketError.WouldBlock)
                    this.ReceivePacketPool.Return(packet)
                    throw ex
                else
                    0
            catch (ex: Exception) =>
                this.ReceivePacketPool.Return(packet)
                throw ex

        (packet, numberOfBytesReadFromSocket)

    private FreeReceivedPacket(packet: Packet): () =
        this.ReceivePacketPool.Return(packet)

    private ProcessLagSimulatedPackets(): () =
        let mutable maxCountToProcess = this.lagQueue.Count
        let mutable count = 0
        while (count < maxCountToProcess)
            count <- count + 1
            let state = this.lagQueue.Dequeue()
            match (this.PacketLossSimulationRate)
            | packetLossRate when (packetLossRate > 0 && this.lagRandom.Next(0, 100) <= int32(packetLossRate)) =>
                this.FreeReceivedPacket(state.Packet)
            | _ =>
                match (this.LatencySimulationRange)
                | (start, end) when ((end > 0) && (end >= start)) =>
                    let artificialLag = float32(this.lagRandom.Next(int32(start), int32(end)))
                    if ((state.Time + (artificialLag / 1000: float32)) < this.timeSinceStart)
                        this.HandleReceivedPacket(state.Packet)
                        this.FreeReceivedPacket(state.Packet)
                    else
                        this.lagQueue.Enqueue(state)
                | _ =>
                    this.HandleReceivedPacket(state.Packet)
                    this.FreeReceivedPacket(state.Packet)

    private HandleReceivedPacket(packet: Packet): () =
        try
            this.HandlePacketAux(packet)
        catch (ex: Exception) =>
            this.Disconnect(packet.IPEndPoint, ClientDisconnectReason.MalformedPacketOrException)

    private HandlePacketAux(packet: Packet): () =
        let endPoint = packet.IPEndPoint
                    
        let mutable connection = unchecked default
        if (this.connections.TryGetValue(endPoint, &connection))
            let packetFactory = connection.PacketFactory
            if (packetFactory !== null)
                match (packet.Kind)
                | PacketKind.ConnectionRequested =>
                    ()

                | PacketKind.Heartbeat =>
                    connection.Time <- 0

                | PacketKind.Disconnect =>
                    this.Disconnect(endPoint, ClientDisconnectReason.ClientInitiated)

                | PacketKind.SmallUnreliable =>
                    let channel = packet.Channel
                    let bstream = ByteStream()
                    bstream.Write(packet.DataSpan)
                    bstream.ResetPosition()
                    this.onMessageReceived(endPoint, bstream, channel)

                | PacketKind.Unreliable 
                | PacketKind.UnreliableSequenced =>
                    let channel = packet.Channel
                    connection.Channels.GetDefragmenter(packet.Kind, channel).HandlePacket(packet.Stream,
                        (bstream, channel) ->
                            this.onMessageReceived(endPoint, bstream, channel)
                    )

                | PacketKind.ReliableSequenced =>
                    let channel = packet.Channel

                    let header = packet.Stream.Read<PacketMessageHeader>()
                    let seqId = header.SequenceId
                    let fragIndex = header.FragmentIndex

                    let ackPacket = Packet.CreateReliableSequencedAck(seqId, fragIndex, channel, Unsafe.Cast(endPoint))
                    this.SendPacket(ackPacket)

                    packet.Stream.ResetPosition()
                    connection.Channels.GetDefragmenter(PacketKind.ReliableSequenced, channel).HandlePacket(packet.Stream,
                        (bstream, channel) -> this.onMessageReceived(endPoint, bstream, channel)
                    )

                | PacketKind.ReliableSequencedAck =>
                    let channel = packet.Channel
                    let header = packet.Stream.Read<PacketMessageHeader>()                   
                    let acks = connection.Channels.GetAck(PacketKind.ReliableSequenced, channel)
                    if (!acks.IsAcked(header.SequenceId, header.FragmentIndex))
                        acks.Ack(header.SequenceId, header.FragmentIndex)

                | _ =>
                    ()
                    // TODO: Client message
            else
                match (packet.Kind)
                | PacketKind.ConnectionRequested =>
                    ()

                | PacketKind.Heartbeat =>
                    connection.PacketFactory <- PacketFactory()
                    connection.Time <- 0

                    this.SendHeartbeat(endPoint)
                    this.onClientConnected(endPoint)

                | _ =>
                    this.Disconnect(endPoint, ClientDisconnectReason.MalformedPacketOrException)
        else
            match (packet.Kind)
            | PacketKind.ConnectionRequested =>
                let connectionKey = packet.DataString
                if (connectionKey == this.connectionKey && this.onConnectionRequested(endPoint))
                    if (this.connections.TryAdd(endPoint, Connection()))
                        this.SendConnectionAccepted(endPoint)
                else
                    this.Disconnect(endPoint, ClientDisconnectReason.BadConnectionKey)
            | _ =>
                this.Disconnect(endPoint, ClientDisconnectReason.InvalidPacket)

    Start(
            connectionKey: string
        ): bool =
        if (this.isStarted)
            throw InvalidOperationException("Server already started.")

        this.isStarted <- true
        this.connectionKey <- connectionKey
        this.timeSinceStart <- 0
        this.socket.ReceiveBufferSize <- Int32.MaxValue
        this.iv.Regenerate()
        true

    Stop(): () =
        if (!this.isStarted)
            throw InvalidOperationException("Server not started.")

        this.ForEachConnection(
            endPoint ->
                this.Disconnect(endPoint, ClientDisconnectReason.ServerInitiated)
        )
        assert(this.connections.Count == 0)
        this.isStarted <- false
        this.socket.ReceiveBufferSize <- 0
        this.lagQueue.Clear()

    ForEachConnection(f: IPEndPoint -> ()): () =
        ForEach(this.connections,
            (mutable pair) ->
                if (pair.Value.PacketFactory !== null)
                    f(pair.Key)
        )

    private SendCore(bytes: ReadOnlySpan<byte>, channel: byte, endPoint: IPEndPoint, kind: PacketKind): () =
        if (!this.isStarted)
            throw InvalidOperationException("Server not started.")

        // TODO: We need to add a limiter here so we do not send huge bursts of packets.

        let mutable connection = unchecked default
        if (this.connections.TryGetValue(endPoint, &connection))
            let packetFactory = connection.PacketFactory
            if (packetFactory !== null)
                let packets = packetFactory.CreatePackets(kind, channel, bytes, Unsafe.Cast(endPoint))

                if (kind == PacketKind.ReliableSequenced)
                    let mutable i = 0
                    while (i < packets.Length)
                        let packet = packets[i]
                        packet.IPEndPoint <- endPoint
                        let acks = connection.Channels.GetAck(kind, channel)
                        acks.MarkAck(packet)
                        this.SendPacket(packet)
                        i <- i + 1
                else
                    let mutable i = 0
                    while (i < packets.Length)
                        let packet = packets[i]
                        packet.IPEndPoint <- endPoint
                        this.SendPacket(packet)
                        i <- i + 1

    Send(bytes: ReadOnlySpan<byte>, channel: byte, endPoint: IPEndPoint): () =
        this.SendCore(bytes, channel, endPoint, PacketKind.Unreliable)

    SendSequenced(bytes: ReadOnlySpan<byte>, channel: byte, endPoint: IPEndPoint): () =
        this.SendCore(bytes, channel, endPoint, PacketKind.UnreliableSequenced)

    SendReliableSequenced(bytes: ReadOnlySpan<byte>, channel: byte, endPoint: IPEndPoint): () =
        this.SendCore(bytes, channel, endPoint, PacketKind.ReliableSequenced)
        
    Heartbeat(deltaTime: float32): () =
        if (!this.isStarted)
            throw InvalidOperationException("Server not started.")

        this.stats.LastSentByteCount <- 0
        this.stats.PacketCountSinceHeartbeat <- 0

        this.endPointsToDisconnect.Clear()

        ForEach(this.connections,
            (mutable pair) ->
                let endPoint = pair.Key
                let connection = pair.Value
                if (connection.Time >= this.clientTimeout)
                    this.Disconnect(endPoint, ClientDisconnectReason.TimedOut)
                else
                    connection.Time <- connection.Time + deltaTime
                    if (connection.PacketFactory !== null)

                        ForEach(connection.Channels.AckChannels,
                            (mutable pair) ->
                                let acks = pair.Value
                                acks.Heartbeat(deltaTime,
                                    packet ->
                                        this.SendPacket(packet),
                                    endPoint ->
                                        let _ = this.endPointsToDisconnect.Add(endPoint)
                                )
                        )

                        this.SendHeartbeat(endPoint)
                    else
                        this.SendConnectionAccepted(endPoint)
        )

        ForEach(this.endPointsToDisconnect,
            endPoint ->
                this.Disconnect(endPoint, ClientDisconnectReason.AckTimedOut)
        )

        this.ProcessLagSimulatedPackets()

        let availableBytes = this.socket.Available
        let mutable readByteCount = 0
        while (readByteCount < availableBytes)
            let (packet, numberOfBytesReadFromSocket) = this.ReceivePacket()
            readByteCount <- readByteCount + numberOfBytesReadFromSocket

            if (packet.IPEndPoint !== null)
                let mutable willFree = true

                match (this.LatencySimulationRange)
                | (start, end) when ((end > 0) && (end >= start)) =>
                    willFree <- false
                | _ =>
                    ()

                match (this.PacketLossSimulationRate)
                | packetLossRate when (packetLossRate > 0) =>
                    willFree <- false
                | _ =>
                    ()

                if (willFree)
                    this.HandleReceivedPacket(packet)
                    this.FreeReceivedPacket(packet)
                else
                    this.lagQueue.Enqueue(LagSimulatedPacket(packet, this.timeSinceStart))
            else
                this.FreeReceivedPacket(packet)

        this.timeSinceStart <- this.timeSinceStart + deltaTime

    Dispose(): () =
        if (this.isStarted)
            this.Stop()

private class Connection =
    Time: float32 get, set = 0
    PacketFactory: PacketFactory get, set = null
    Channels: Channels get = Channels()