module Evergreen.Graphics.Backend.Interop.VulkanMemoryAllocator

open System
open System.Text
open System.Collections.Generic
open System.Collections.Concurrent
open System.Runtime.InteropServices
open System.Runtime.CompilerServices
open TerraFX.Interop.Vulkan
open static TerraFX.Interop.Vulkan.Vulkan

struct VmaAllocator =
    private field Value: nuint = default

struct VmaAllocation =
    private field Value: nuint = default

struct VmaPool =
    private field Value: nuint = default

#[Flags]
enum VmaAllocatorCreateFlags =
    | VMA_ALLOCATOR_CREATE_EXTERNALLY_SYNCHRONIZED_BIT = 0x00000001
    | VMA_ALLOCATOR_CREATE_KHR_DEDICATED_ALLOCATION_BIT = 0x00000002
    | VMA_ALLOCATOR_CREATE_KHR_BIND_MEMORY2_BIT = 0x00000004
    | VMA_ALLOCATOR_CREATE_EXT_MEMORY_BUDGET_BIT = 0x00000008
    | VMA_ALLOCATOR_CREATE_AMD_DEVICE_COHERENT_MEMORY_BIT = 0x00000010
    | VMA_ALLOCATOR_CREATE_BUFFER_DEVICE_ADDRESS_BIT = 0x00000020
    | VMA_ALLOCATOR_CREATE_EXT_MEMORY_PRIORITY_BIT = 0x00000040
    | VMA_ALLOCATOR_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF

#[Flags]
enum VmaAllocationCreateFlags =
    | VMA_ALLOCATION_CREATE_DEDICATED_MEMORY_BIT = 0x00000001
    | VMA_ALLOCATION_CREATE_NEVER_ALLOCATE_BIT = 0x00000002
    | VMA_ALLOCATION_CREATE_MAPPED_BIT = 0x00000004
    | VMA_ALLOCATION_CREATE_USER_DATA_COPY_STRING_BIT = 0x00000020
    | VMA_ALLOCATION_CREATE_UPPER_ADDRESS_BIT = 0x00000040
    | VMA_ALLOCATION_CREATE_DONT_BIND_BIT = 0x00000080
    | VMA_ALLOCATION_CREATE_WITHIN_BUDGET_BIT = 0x00000100
    | VMA_ALLOCATION_CREATE_CAN_ALIAS_BIT = 0x00000200
    | VMA_ALLOCATION_CREATE_HOST_ACCESS_SEQUENTIAL_WRITE_BIT = 0x00000400
    | VMA_ALLOCATION_CREATE_HOST_ACCESS_RANDOM_BIT = 0x00000800
    | VMA_ALLOCATION_CREATE_HOST_ACCESS_ALLOW_TRANSFER_INSTEAD_BIT = 0x00001000
    | VMA_ALLOCATION_CREATE_STRATEGY_MIN_MEMORY_BIT = 0x00010000
    | VMA_ALLOCATION_CREATE_STRATEGY_MIN_TIME_BIT = 0x00020000
    | VMA_ALLOCATION_CREATE_STRATEGY_MIN_OFFSET_BIT  = 0x00040000
    | VMA_ALLOCATION_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF

    //     VMA_ALLOCATION_CREATE_STRATEGY_BEST_FIT_BIT = VMA_ALLOCATION_CREATE_STRATEGY_MIN_MEMORY_BIT,
    //     /** Alias to #VMA_ALLOCATION_CREATE_STRATEGY_MIN_TIME_BIT.
    //     */
    //     VMA_ALLOCATION_CREATE_STRATEGY_FIRST_FIT_BIT = VMA_ALLOCATION_CREATE_STRATEGY_MIN_TIME_BIT,
    //     /** A bit mask to extract only `STRATEGY` bits from entire set of flags.
    //     */
    //     VMA_ALLOCATION_CREATE_STRATEGY_MASK =
    //         VMA_ALLOCATION_CREATE_STRATEGY_MIN_MEMORY_BIT |
    //         VMA_ALLOCATION_CREATE_STRATEGY_MIN_TIME_BIT |
    //         VMA_ALLOCATION_CREATE_STRATEGY_MIN_OFFSET_BIT,

#[Flags]
enum VmaMemoryUsage =
    | VMA_MEMORY_USAGE_UNKNOWN = 0
    | VMA_MEMORY_USAGE_GPU_ONLY = 1
    | VMA_MEMORY_USAGE_CPU_ONLY = 2
    | VMA_MEMORY_USAGE_CPU_TO_GPU = 3
    | VMA_MEMORY_USAGE_GPU_TO_CPU = 4
    | VMA_MEMORY_USAGE_CPU_COPY = 5
    | VMA_MEMORY_USAGE_GPU_LAZILY_ALLOCATED = 6
    | VMA_MEMORY_USAGE_AUTO = 7
    | VMA_MEMORY_USAGE_AUTO_PREFER_DEVICE = 8
    | VMA_MEMORY_USAGE_AUTO_PREFER_HOST = 9
    | VMA_MEMORY_USAGE_MAX_ENUM = 0x7FFFFFFF

struct VmaDeviceMemoryCallbacks =
    public field mutable pfnAllocate: nuint = default // TODO: instead of 'nint' use 'PFN_vmaAllocateDeviceMemoryFunction'
    public field mutable pfnFree: nuint = default // TODO: instead of 'nint' use 'PFN_vmaFreeDeviceMemoryFunction'
    public field mutable pUserData: void* = default

alias PFN_vkGetInstanceProcAddr = static (instance: VkInstance, pName: int8*) -> static blittable () -> ()
alias PFN_vkGetDeviceProcAddr = static (device: VkDevice, pName: int8*) -> static blittable () -> ()

struct VmaVulkanFunctions =
    public field mutable vkGetInstanceProcAddr: PFN_vkGetInstanceProcAddr = default
    public field mutable vkGetDeviceProcAddr: PFN_vkGetDeviceProcAddr = default
    public field mutable vkGetPhysicalDeviceProperties: nuint = default // PFN_vkGetPhysicalDeviceProperties
    public field mutable vkGetPhysicalDeviceMemoryProperties: nuint = default // PFN_vkGetPhysicalDeviceMemoryProperties
    public field mutable vkAllocateMemory: nuint = default // PFN_vkAllocateMemory
    public field mutable vkFreeMemory: nuint = default // PFN_vkFreeMemory
    public field mutable vkMapMemory: nuint = default // PFN_vkMapMemory
    public field mutable vkUnmapMemory: nuint = default // PFN_vkUnmapMemory
    public field mutable vkFlushMappedMemoryRanges: nuint = default // PFN_vkFlushMappedMemoryRanges
    public field mutable vkInvalidateMappedMemoryRanges: nuint = default // PFN_vkInvalidateMappedMemoryRanges
    public field mutable vkBindBufferMemory: nuint = default // PFN_vkBindBufferMemory
    public field mutable vkBindImageMemory: nuint = default // PFN_vkBindImageMemory
    public field mutable vkGetBufferMemoryRequirements: nuint = default // PFN_vkGetBufferMemoryRequirements
    public field mutable vkGetImageMemoryRequirements: nuint = default // PFN_vkGetImageMemoryRequirements
    public field mutable vkCreateBuffer: nuint = default // PFN_vkCreateBuffer
    public field mutable vkDestroyBuffer: nuint = default // PFN_vkDestroyBuffer
    public field mutable vkCreateImage: nuint = default // PFN_vkCreateImage
    public field mutable vkDestroyImage: nuint = default // PFN_vkDestroyImage
    public field mutable vkCmdCopyBuffer: nuint = default // PFN_vkCmdCopyBuffer
    public field mutable vkGetBufferMemoryRequirements2KHR: nuint = default // PFN_vkGetBufferMemoryRequirements2KHR
    public field mutable vkGetImageMemoryRequirements2KHR: nuint = default // PFN_vkGetImageMemoryRequirements2KHR
    public field mutable vkBindBufferMemory2KHR: nuint = default // PFN_vkBindBufferMemory2KHR
    public field mutable vkBindImageMemory2KHR: nuint = default // PFN_vkBindImageMemory2KHR
    public field mutable vkGetPhysicalDeviceMemoryProperties2KHR: nuint = default // PFN_vkGetPhysicalDeviceMemoryProperties2KHR
    public field mutable vkGetDeviceBufferMemoryRequirements: nuint = default // PFN_vkGetDeviceBufferMemoryRequirements
    public field mutable vkGetDeviceImageMemoryRequirements: nuint = default // PFN_vkGetDeviceImageMemoryRequirements

struct VmaAllocatorCreateInfo =
    public field mutable flags: VmaAllocatorCreateFlags = default
    public field mutable physicalDevice: VkPhysicalDevice = default
    public field mutable device: VkDevice = default
    public field mutable preferredLargeHeapBlockSize: uint64 = default // VkDeviceSize
    public field mutable pAllocationCallbacks: VkAllocationCallbacks* = default
    public field mutable pDeviceMemoryCallbacks: VmaDeviceMemoryCallbacks* = default
    public field mutable pHeapSizeLimit: uint64* = default // VkDeviceSize*
    public field mutable pVulkanFunctions: VmaVulkanFunctions* = default
    public field mutable instance: VkInstance = default
    public field mutable vulkanApiVersion: uint32 = default
    public field mutable pTypeExternalMemoryHandleTypes: VkExternalMemoryHandleTypeFlags* = default

struct VmaAllocationCreateInfo =
    public field mutable flags: VmaAllocationCreateFlags = default
    public field mutable usage: VmaMemoryUsage = default
    public field mutable requiredFlags: VkMemoryPropertyFlags = default
    public field mutable preferredFlags: VkMemoryPropertyFlags = default
    public field mutable memoryTypeBits: uint32 = default
    public field mutable vmaPool: VmaPool = default
    public field mutable pUserData: void* = default
    public field mutable priority: float32 = default

struct VmaAllocationInfo =
    public field mutable memoryType: uint32 = default
    public field mutable devicememory: VkDeviceMemory = default
    public field mutable offset: uint64 = default // VkDeviceSize
    public field mutable size: uint64 = default // VkDeviceSize
    public field mutable pMappedData: void* = default
    public field mutable pUserData: void* = default
    public field mutable pName: int8* = default

#[import("C", "Evergreen.Graphics.Native.dll", "vmaCreateAllocator")]
vmaCreateAllocator(pCreateInfo: VmaAllocatorCreateInfo*, pAllocator: VmaAllocator*): VkResult

#[import("C", "Evergreen.Graphics.Native.dll", "vmaDestroyAllocator")]
vmaDestroyAllocator(allocator: VmaAllocator): ()

#[import("C", "Evergreen.Graphics.Native.dll", "vmaCreateBuffer")]
vmaCreateBuffer(
    allocator: VmaAllocator, 
    pBufferCreateInfo: VkBufferCreateInfo*, 
    pAllocationCreateInfo: VmaAllocationCreateInfo*, 
    #[Out] pBuffer: VkBuffer*,
    #[Out] pAllocation: VmaAllocation*,
    #[Out] pAllocationInfo: VmaAllocationInfo*): VkResult

#[import("C", "Evergreen.Graphics.Native.dll", "vmaDestroyBuffer")]
vmaDestroyBuffer(allocator: VmaAllocator, buffer: VkBuffer, allocation: VmaAllocation): ()

#[import("C", "Evergreen.Graphics.Native.dll", "vmaMapMemory")]
vmaMapMemory(allocator: VmaAllocator, allocation: VmaAllocation, ppData: (void*)*): VkResult

#[import("C", "Evergreen.Graphics.Native.dll", "vmaUnmapMemory")]
vmaUnmapMemory(allocator: VmaAllocator, allocation: VmaAllocation): ()

#[import("C", "Evergreen.Graphics.Native.dll", "vmaGetAllocationMemoryProperties")]
vmaGetAllocationMemoryProperties(allocator: VmaAllocator, allocation: VmaAllocation, pFlags: VkMemoryPropertyFlags*): ()

#[import("C", "Evergreen.Graphics.Native.dll", "vmaFlushAllocation")]
vmaFlushAllocation(allocator: VmaAllocator, allocation: VmaAllocation, offset: uint64, size: uint64): VkResult

#[import("C", "Evergreen.Graphics.Native.dll", "vmaCreateImage")]
vmaCreateImage(allocator: VmaAllocator, pImageCreateInfo: VkImageCreateInfo*, pAllocationCreateInfo: VmaAllocationCreateInfo*, pImage: VkImage*, pAllocation: VmaAllocation*, pAllocateInfo: VmaAllocationInfo*): VkResult

#[import("C", "Evergreen.Graphics.Native.dll", "vmaDestroyImage")]
vmaDestroyImage(allocator: VmaAllocator, image: VkImage, allocation: VmaAllocation): ()
