namespace Game.Shared.Systems

open System
open System.Numerics
open System.Diagnostics
open System.Collections.Generic 
open System.Collections.Concurrent

open Evergreen.Utilities
open Evergreen.Collections
open Evergreen.Physics

open Game.Shared
open static Game.Shared.Types
open static Game.Shared.Components
open static Game.Shared.World

enum CharacterMotionKind =
    | None
    | Fly

enum PhysicsLayer =
    inherits byte

    | Unknown = 0
    | NonMoving = 1
    | Moving = 2
    | Character = 3
    | CharacterVirtual = 4
    | Noclip = 5

    | MaxNumberOfLayers = 5

module Logic =

    field nowStopwatch: Stopwatch = Stopwatch.StartNew()
    now(): int32 = int32(Logic.nowStopwatch.Elapsed.TotalMilliseconds)

    playerInputToMotion(playerInput: inref<CharacterInput>, camera: inref<Camera>, speed: float32, motionKind: CharacterMotionKind): vec3 =
        let mutable movementCamera = camera

        match (motionKind)
        | CharacterMotionKind.Fly =>
            movementCamera.SetYawPitch(playerInput.Yaw, playerInput.Pitch)
        | _ =>
            movementCamera.SetYawPitch(playerInput.Yaw, 0)

        let movementCameraTransform = movementCamera.GetTransform(vec3.Zero) // TODO-language-bug: should be able to see error for 'movementCamera.GetTransform(transform)' as no overload exists, inref might be causing the error range issue.
    
        let forwardMovementFactor = clamp(0, 1, playerInput.ForwardMovementFactor)
        let backwardMovementFactor = clamp(0, 1, playerInput.BackwardMovementFactor)
        let leftMovementFactor = clamp(0, 1, playerInput.LeftMovementFactor)
        let rightMovementFactor = clamp(0, 1, playerInput.RightMovementFactor)
        let mutable acc = Vector3.Zero
            
        if (playerInput.Actions & CharacterActions.Forward != CharacterActions.None && playerInput.Actions & CharacterActions.Backward == CharacterActions.None)
            acc <- movementCameraTransform.Forward * forwardMovementFactor
    
        if (playerInput.Actions & CharacterActions.Backward != CharacterActions.None && playerInput.Actions & CharacterActions.Forward == CharacterActions.None)
            acc <- acc + movementCameraTransform.Backward * backwardMovementFactor
    
        if (playerInput.Actions & CharacterActions.Left != CharacterActions.None && playerInput.Actions & CharacterActions.Right == CharacterActions.None)
            acc <- acc + movementCameraTransform.Left * leftMovementFactor
    
        if (playerInput.Actions & CharacterActions.Right != CharacterActions.None && playerInput.Actions & CharacterActions.Left == CharacterActions.None)
            acc <- acc + movementCameraTransform.Right * rightMovementFactor

        if (acc != Vector3.Zero)
            let normAcc = Vector3.Normalize(acc)
            let factor = clamp(0, 1, Vector3.Dot(normAcc, acc))
            normAcc * speed * factor
        else
            acc

    playerVirtualTick(physics: Physics, deltaTime: float32, playerInput: inref<CharacterInput>, characterId: inref<VirtualCharacterId>, transform: byref<Transform>, physCharacter: byref<VirtualCharacter>, camera: byref<Camera>): () =
        camera.SetYawPitch(playerInput.Yaw, playerInput.Pitch)

        let layer =
            if (physCharacter.Flags.HasFlag(VirtualCharacterFlags.Noclip))
                PhysicsLayer.Noclip
            else
                PhysicsLayer.CharacterVirtual

        let motionKind =
            if (layer == PhysicsLayer.Noclip)
                CharacterMotionKind.Fly
            else
                CharacterMotionKind.None

        let motion = playerInputToMotion(&playerInput, &camera, physCharacter.Speed, motionKind)

        physics.UpdateGroundVelocity(characterId, Unsafe.Cast(layer)) // virtual only
        
        let mutable newVelocity = physics.GetLinearVelocity(characterId)
        if (layer == PhysicsLayer.CharacterVirtual)
            if (physics.IsOnGround(characterId))
                newVelocity <- (physics.GetGroundVelocity(characterId) + motion)
                newVelocity.Z <- 0
                if (playerInput.Actions & CharacterActions.Jump == CharacterActions.Jump)
                    newVelocity <- newVelocity + Vector3(0, 0, 5)
            else if (Vector3.Dot(newVelocity, motion) < motion.Length())
                newVelocity <- (newVelocity + motion * 0.2)
        
            let newVelocity = newVelocity + (physics.Gravity * deltaTime) // virtual only

            physics.SetLinearVelocity(characterId, newVelocity)
        else
            newVelocity <- motion
            physics.SetLinearVelocity(characterId, newVelocity)

        physics.Update(characterId, Unsafe.Cast(layer), deltaTime) // virtual only
        SyncPhysicsInfo(physics, characterId, &transform, &physCharacter)

    playerEditorTick(deltaTime: float32, playerInput: inref<CharacterInput>, editor: byref<Editor>): () =
        editor.Camera.SetYawPitch(playerInput.Yaw, playerInput.Pitch)

        let motion = playerInputToMotion(&playerInput, &editor.Camera, 1, CharacterMotionKind.Fly)

        editor.Transform.Position <- editor.Transform.Position + motion

    SyncPhysicsInfo(physics: Physics, physId: StaticObjectId, transform: byref<Transform>, physInfo: byref<StaticRigidBody>): () =
        let mutable _isActive = false

        let mutable layer = default
        physics.GetState(physId,
                         &transform.Position,
                         &transform.Rotation,
                         &layer,
                         &_isActive
        )

    SyncPhysicsInfo(physics: Physics, physId: DynamicObjectId, transform: byref<Transform>, physInfo: byref<RigidBody>): () =
        let mutable isActive = false

        let mutable layer = default
        physics.GetState(physId,
                         &transform.Position,
                         &transform.Rotation,
                         &physInfo.LinearVelocity,
                         &physInfo.AngularVelocity,
                         &layer,
                         &isActive
        )

        if (isActive)
            physInfo.Flags <- physInfo.Flags | RigidBodyFlags.Active
        else
            physInfo.Flags <- physInfo.Flags & ~RigidBodyFlags.Active

    SyncPhysicsInfo(physics: Physics, physId: CharacterId, transform: byref<Transform>, physInfo: byref<Character>): () =
        transform.Position <- physics.GetPosition(physId)
        physInfo.LinearVelocity <- physics.GetLinearVelocity(physId)

    SyncPhysicsInfo(physics: Physics, physId: VirtualCharacterId, transform: byref<Transform>, physInfo: byref<VirtualCharacter>): () =
        transform.Position <- physics.GetPosition(physId)
        physInfo.LinearVelocity <- physics.GetLinearVelocity(physId)

enum PhysicsSystemKind =
    | Server
    | Client

struct ContactAddedArgs =

    Entity1: EntityId get
    Point1: Vector3 get
    Entity2: EntityId get
    Point2: Vector3 get

    new(entId1: EntityId, point1: Vector3, entId2: EntityId, point2: Vector3) =
        {
            Entity1 = entId1
            Point1 = point1
            Entity2 = entId2
            Point2 = point2
        }

abstract class PhysicsSystem =
    implements IDisposable

    protected field kind: PhysicsSystemKind
    protected field db: UnlockedEntityDatabase
    public field physics: Physics
    field portalContacts: Dictionary<EntityId, EntityId>
    
    field contactAdded: Event<ContactAddedArgs>

    ContactListeningEnabled: bool get, set

    ContactAdded: IEvent<ContactAddedArgs> get() = this.contactAdded.Publish

    IsValidPhysicsId(physId: VirtualCharacterId): bool =
        this.physics.IsValid(physId)

    protected new(kind: PhysicsSystemKind, db: UnlockedEntityDatabase, genv: GameEnv) = 
        let contactAdded = 
            (bodyId1: uint32, userData1, point1: Vector3, bodyId2: uint32, userData2, point2: Vector3) ->
                if (this.ContactListeningEnabled)
                    let entId1 = EntityId.Decode(userData1)
                    let entId2 = EntityId.Decode(userData2)
#if DEBUG
                    if (!db.IsValid(entId1))
                        fail("not valid")
                    if (!db.IsValid(entId2))
                        fail("not valid")
#end
                    this.contactAdded.Trigger(ContactAddedArgs(entId1, point1, entId2, point2))

        let contactPersisted = 
            (bodyId1: uint32, userData1, bodyId2: uint32, userData2) ->
                if (this.ContactListeningEnabled)
                    ()

        let shouldCollide =
            (layer1: byte, layer2: byte) ->
                let layer1: PhysicsLayer = Unsafe.Cast(layer1)
                let layer2: PhysicsLayer = Unsafe.Cast(layer2)

                match (layer1)
                | PhysicsLayer.Character =>
                    layer2 != PhysicsLayer.CharacterVirtual
                | PhysicsLayer.CharacterVirtual =>
                    layer2 != PhysicsLayer.Character
                | PhysicsLayer.NonMoving =>
                    layer2 != PhysicsLayer.NonMoving // Non moving only collides with moving
                | PhysicsLayer.Moving =>
                    true // Moving collides with everything
                | PhysicsLayer.Noclip =>
                    false
                | _ =>
                    fail("invalid layer")

        let physics = Physics.Create(Unsafe.Cast(PhysicsLayer.MaxNumberOfLayers), contactAdded, contactPersisted, shouldCollide)
        
        db.HandleComponentCycle<DynamicObjectId, /**/ Transform, RigidBody, BoxCollider>(
            (entId, physObjId, transform, phys, _) ->                                  
                physObjId <- physics.AddBox(transform.Scale, phys.Mass, entId.Encode(), uint32(entId.Index),
                                transform.Position, transform.Rotation, phys.LinearVelocity, phys.AngularVelocity, 1, Unsafe.Cast(PhysicsLayer.Moving), phys.IsActive
                                )

                Logic.SyncPhysicsInfo(physics, physObjId, &transform, &phys)
                ,             
            (entId, physObjId, _, _, _) ->
                physics.Remove(physObjId)
        )   

        db.HandleComponentCycle<StaticObjectId, /**/ Transform, StaticRigidBody, BoxCollider>(
            (entId, physObjId, transform, phys, _) ->
                physObjId <- physics.AddStaticBox(transform.Scale, entId.Encode(), uint32(entId.Index), transform.Position, transform.Rotation, phys.IsSensor, Unsafe.Cast(PhysicsLayer.NonMoving), true)

                Logic.SyncPhysicsInfo(physics, physObjId, &transform, &phys),
            (entId, physObjId, _, _, _) ->
                physics.Remove(physObjId)
        )

        db.HandleComponentCycle<StaticObjectId, /**/ Transform, StaticRigidBody, MeshCollider>(
            (entId, physObjId, transform, phys, collider) ->
                let meshGroup = genv.MeshManager.Get(collider.MeshId)
                let meshes = 
                    let scale = transform.Scale
                    map(meshGroup.Meshes,
                        mesh ->
                            #[inline]
                            let mapVertex(i: int32) =
                                let v = mesh.Vertices.Array[i].Position
                                Vector3(v.X * scale.X, v.Y * scale.Y, v.Z * scale.Z)
                
                            let vertices = ReadOnlyMemory(initMutableArray(mesh.Vertices.Length, mapVertex))
                            let indices = ReadOnlyMemory(mesh.Indices.Array)

                            PhysicsMesh(vertices, indices)
                    )

                physObjId <- physics.AddStaticCompoundMesh(meshes, entId.Encode(), uint32(entId.Index), transform.Position, transform.Rotation, Unsafe.Cast(PhysicsLayer.NonMoving), true)                  

                Logic.SyncPhysicsInfo(physics, physObjId, &transform, &phys),
            (entId, physObjId, _, _, _) ->
                physics.Remove(physObjId)
        )

        db.HandleComponentCycle<CharacterId, /**/ Character, Transform>(
            (entId, physId, phys, transform) ->
                physId <- physics.AddCharacter(transform.Position, Unsafe.Cast(PhysicsLayer.Character), entId.Encode())
                physics.SetLinearVelocity(physId, phys.LinearVelocity)

                Logic.SyncPhysicsInfo(physics, physId, &transform, &phys),
            (entId, physId, _phys, _) ->
                physics.Remove(physId)
                
        )

        db.HandleComponentCycle<VirtualCharacterId, /**/ VirtualCharacter, Transform>(
            (mutable entId, physId, phys, transform) ->
                physId <- physics.AddVirtualCharacter(transform.Position, Unsafe.Cast(PhysicsLayer.CharacterVirtual), entId.Encode())
                physics.SetLinearVelocity(physId, phys.LinearVelocity)

                Logic.SyncPhysicsInfo(physics, physId, &transform, &phys)

                // verbose
                let mutable value = physId.Value
                if (kind == PhysicsSystemKind.Server)
                    LogServer("Added virtual character " + value.ToString() + " - " + entId.ToString() + " - " + transform.Position.ToString())
                else
                    LogClient("Added virtual character " + value.ToString() + " - " + entId.ToString() + " - " + transform.Position.ToString())
                ,
            (mutable entId, physObjId, _phys, _) ->
                // verbose
                let mutable value = physObjId.Value
                if (kind == PhysicsSystemKind.Server)
                    LogServer("Removing virtual character " + value.ToString() + " - " + entId.ToString())
                else
                    LogClient("Removing virtual character " + value.ToString() + " - " + entId.ToString())

                physics.Remove(physObjId)
        )

#if DEBUG
        db.HandleComponentCycle<DynamicObjectId>(
            (mutable entId, objId) ->
                if (!physics.IsValid(objId))
                    fail("Entity '" + entId.ToString() + "' is assigned an invalid dynamic object ID.")
            ,
            (mutable entId, objId) ->
                if (physics.IsValid(objId))
                    fail("Entity '" + entId.ToString() + "' should not be assigned a valid dynamic object ID.")
        )

        db.HandleComponentCycle<StaticObjectId>(
            (mutable entId, objId) ->
                if (!physics.IsValid(objId))
                    fail("Entity '" + entId.ToString() + "' is assigned an invalid static object ID.")
            ,
            (mutable entId, objId) ->
                if (physics.IsValid(objId))
                    fail("Entity '" + entId.ToString() + "' should not be assigned a valid static object ID.")
        )

        db.HandleComponentCycle<CharacterId>(
            (mutable entId, charId) ->
                if (!physics.IsValid(charId))
                    fail("Entity '" + entId.ToString() + "' is assigned an invalid character ID.")
            ,
            (mutable entId, charId) ->
                if (physics.IsValid(charId))
                    fail("Entity '" + entId.ToString() + "' should not be assigned a valid character ID.")
        )

        db.HandleComponentCycle<VirtualCharacterId>(
            (mutable entId, charId) ->
                if (!physics.IsValid(charId))
                    fail("Entity '" + entId.ToString() + "' is assigned an invalid virtual character ID.")
            ,
            (mutable entId, charId) ->
                if (physics.IsValid(charId))
                    fail("Entity '" + entId.ToString() + "' should not be assigned a valid virtual character ID.")
        )
#end

        { 
            kind = kind
            db = db
            physics = physics
            portalContacts = Dictionary(EntityId.Comparer)
            contactAdded = Event()
            ContactListeningEnabled = true
        }

    protected SyncInfo(): () =
        let db = this.db
        let physics = this.physics

        db.CreateQuery<Transform, RigidBody, DynamicObjectId>().ForEach(
            (entId, transform, physInfo, physId) ->
                Logic.SyncPhysicsInfo(physics, physId, &transform, &physInfo)
        )

        db.CreateQuery<Transform, Character, CharacterId>().ForEach(
            (entId, transform, physInfo, physId) ->
                Logic.SyncPhysicsInfo(physics, physId, &transform, &physInfo)
        )

        db.CreateQuery<Transform, VirtualCharacter, VirtualCharacterId>().ForEach(
            (entId, transform, physInfo, physId) ->
                Logic.SyncPhysicsInfo(physics, physId, &transform, &physInfo)
        )

    OptimizeBroadPhase(): () =
        this.physics.OptimizeBroadPhase()

    AreColliding(entId1: EntityId, entId2: EntityId): bool =
        let db = this.db
        let physics = this.physics

        let areColliding(db: EntityDatabase, physics: Physics, portalEntId: EntityId, entId2: EntityId) =
            let mutable areColliding = false
            let _ =
                db.TryGet<StaticObjectId>(portalEntId,
                    (physId1) ->
                        let physId1 = physId1
                        let wasFound =
                            db.TryGet<DynamicObjectId>(entId2,
                                (physId2) -> areColliding <- physics.AreColliding(physId2, physId1)
                            )
                        if (!wasFound)
                            let _ =
                                db.TryGet<CharacterId>(entId2,
                                    (physId2) -> areColliding <- physics.AreColliding(physId2, physId1)
                                )
                )
            areColliding

        areColliding(db, physics, entId1, entId2) || areColliding(db, physics, entId2, entId1)

    abstract default Update(time: GameTime): () =
        let deltaTime = time.DeltaTime
        let physics = this.physics
        let db = this.db

        db.CreateQuery<Orbit, EntityList8, Ownership>().ForEach(
            (entId, orbit, entList, ownership) ->
                entList.RemoveAllInvalid(db)
                let _ =
                    db.TryGet<Transform, VirtualCharacter, Player, Camera>(ownership.Owner,
                        (transform, virtc, player, camera) ->
                            let origin = camera.GetPosition(transform.Position)

                            let count = Math.Clamp(int32(entList.Count), 0, 8)
                            For(count,
                                i -> 
                                    db.IfHas<Transform, RigidBody, DynamicObjectId>(entList[i],
                                        (transform, body, objId) ->
                                            let dir = Vector3.Transform(-Vector3.UnitY, Quaternion.CreateFromAxisAngle(Vector3.UnitZ, orbit.Time * MathF.PI * 0.5 + (float32(i) * radians(360 / float32(count)))))
                                            let targetPosition = (origin - ((Vector3(dir.X, dir.Y, 0)) * 5))
                                            let targetRotation = Quaternion.CreateFromRotationMatrix(Matrix4x4.CreateConstrainedBillboard(origin, transform.Position, vec3.Backward, vec3.Forward, vec3.Forward))

                                            body.LinearVelocity <- (targetPosition - transform.Position) * (deltaTime * 100)
                                            body.AngularVelocity <- (targetRotation * Quaternion.Inverse(transform.Rotation)).ToEulerAngles() * (deltaTime * 500)

                                            physics.SetState(
                                                objId,
                                                transform.Position,
                                                transform.Rotation,
                                                body.LinearVelocity,
                                                body.AngularVelocity,
                                                Unsafe.Cast(PhysicsLayer.Moving),
                                                body.IsActive
                                            )                                           
                                    )
                                    
                            )
                    )
                if (entList.Count == 0)
                    orbit.Time <- 0
                else
                    orbit.Time <- orbit.Time + time.DeltaTime
        )

        physics.Update(deltaTime, 2)
        this.SyncInfo()

    UpdatePlayer(deltaTime: float32, entId: EntityId, characterInput: inref<CharacterInput>): () =
        let db = this.db
        let physics = this.physics

        db.IfHas<Player, Camera, Transform>(entId,
            (_, camera, transform) ->
                let hasEditor =
                    db.TryGet<Editor>(entId,
                        editor ->
                            Logic.playerEditorTick(deltaTime, &characterInput, &editor)
                    )
                db.IfHas<VirtualCharacter, VirtualCharacterId>(entId,
                    (character, characterId) ->
                        // let log(msg: string) =
                        //     if (this.kind == PhysicsSystemKind.Client)
                        //         LogClient(msg)
                        //     else
                        //         LogServer(msg)
                        // log("before frame: " + playerInput.Frame.ToString())
                        // log("\tposition: " + transform.Position.ToString())
                        // log("\tlinear velocity: " + physCharacter.LinearVelocity.ToString())
                        let mutable characterInput = characterInput
                        if (hasEditor)
                            characterInput.Actions <- CharacterActions.None
                            characterInput.Yaw <- camera.Yaw
                            characterInput.Pitch <- camera.Pitch
                        Logic.playerVirtualTick(physics, deltaTime, &characterInput, &characterId, &transform, &character, &camera)
                        // log("Frame " + playerInput.Frame.ToString() + " - " + transform.Position.ToString())
                        // log("frame: " + playerInput.Frame.ToString())
                        // log("\tposition: " + transform.Position.ToString())
                        // log("\tlinear velocity: " + physCharacter.LinearVelocity.ToString())
                )                  
        )

    Dispose(): () =
        this.physics.Dispose()
