namespace Game.Shared

open System
open System.Numerics
open System.Runtime.InteropServices
open System.Collections.Concurrent
open Evergreen.Utilities
open Evergreen.Physics
open Evergreen.Database
open Evergreen.Graphics
open Evergreen.Graphics.Rendering
open Evergreen.Audio
open static Game.AssetManager
open static Game.Shared.Types
open static Game.Shared.Components

interface IUnlockedWorld =

    UnlockedDatabase: UnlockedEntityDatabase get

abstract default class World =

    new(db: EntityDatabase) =
        this {
            Database = db
        }

    new(kind: EntityDatabaseKind) =
        this {
            Database =
                let registry = ComponentRegistry()
                World.RegisterComponents(registry)
                EntityDatabase(kind, registry)
        }

    Database: EntityDatabase get

    IsValid(entId: EntityId): bool =
        this.Database.IsValid(entId)

    CanSpawnEntity: bool get() = this.Database.CanSpawnEntity

    Replicate(dstWorldCopy: World, dstWorld: IUnlockedWorld, events: EntityDatabase.ReplicatingEvents, nonLocalOnly: bool): () =
        this.Database.Replicate(dstWorldCopy.Database, dstWorld.UnlockedDatabase, events, nonLocalOnly)

    CopyTo(dstWorld: World): () =
        this.Database.CopyTo(dstWorld.Database)

    SerializeForNetwork(bstream: ByteStream): () =
        EntityDatabase.SerializeForNetwork(this.Database, bstream)

    DeserializeForNetwork(bstream: ByteStream): () =
        EntityDatabase.DeserializeForNetwork(bstream, this.Database)

    SerializeDeltaForNetwork(prev: World, bstream: ByteStream): () =
        EntityDatabase.SerializeDeltaForNetwork(prev.Database, this.Database, bstream)

    DeserializeDeltaForNetwork(bstream: ByteStream): () =
        EntityDatabase.DeserializeDeltaForNetwork(bstream, this.Database)

    GetReplicatingEvents(prevWorld: World, nonLocalOnly: bool): EntityDatabase.ReplicatingEvents =
        this.Database.GetReplicatingEvents(prevWorld.Database, nonLocalOnly)

    SerializeReplication(prevWorld: World, nonLocalOnly: bool, dstStream: ByteStream): () =
        this.Database.SerializeReplication(prevWorld.Database, nonLocalOnly, dstStream)

    DeserializeReplication(srcStream: ByteStream, dstWorldCopy: World, dstWorld: IUnlockedWorld, nonLocalOnly: bool): () =
        this.Database.DeserializeReplication(srcStream, dstWorldCopy.Database, dstWorld.UnlockedDatabase, nonLocalOnly)

    static RegisterComponents(registry: ComponentRegistry): () =
        registry.Register<Camera>()
        registry.Register<Material>()
        registry.Register<MeshReference>()
        registry.Register<StaticRigidBody>()
        registry.Register<Character>()
        registry.Register<RigidBody>()
        registry.Register<Player>()
        registry.Register<Outline>()
        registry.Register<VirtualCharacter>()
        registry.Register<Light>()
        registry.Register<Ownership>()
        registry.Register<EntityList8>()
        registry.Register<Orbit>()
        registry.Register<LogicOutput>()
        registry.Register<LogicInput>()
        registry.Register<BoxCollider>()
        registry.Register<MeshCollider>()
        registry.Register<Pickupable>()
        registry.Register<Sprite>()
        registry.Register<Transform>()
        registry.Register<Health>()
        registry.Register<PlayerSpawnPoint>()
        registry.Register<Editor>()

    static RegisterFieldMappings(genv: GameEnv, registry: ComponentRegistry): () =
        let registerJsonFieldMapping<T>(
                    endsWithFieldName: string, 
                    endsWithNewFieldName: string, 
                    write: (inref<T>, System.Text.Json.Utf8JsonWriter) -> (),
                    read: (byref<System.Text.Json.Utf8JsonReader>, byref<T>) -> ()
                ) where T: unmanaged, struct, ValueType, { new() } =
            registry.RegisterJsonFieldWriteMapping(endsWithFieldName,
                (fieldName, fieldTy, mutable src, writer) ->
                    if (fieldTy == DotNet.TypeOf<T>)
                        writer.WritePropertyName(fieldName.Replace(endsWithFieldName, endsWithNewFieldName))
                        let value = System.Runtime.InteropServices.MemoryMarshal.Cast<byte, T>(src)[0]
                        write(&value, writer)
                    else
                        fail("Invalid field type for '" + fieldName + "'")
            )

            registry.RegisterJsonFieldReadMapping(endsWithNewFieldName,
                (fieldName, ty, mutable dst, reader) ->
                    let fldName = fieldName.Replace(endsWithNewFieldName, endsWithFieldName)
                    let fldTy = ty.GetField(fldName).FieldType

                    let size =
                        if (fldTy.IsEnum)
                            Marshal.SizeOf(Enum.GetUnderlyingType(fldTy))
                        else
                            Marshal.SizeOf(fldTy)

                    let dst = dst.Slice(int32(Marshal.OffsetOf(ty, fldName)), size)

                    let value = &System.Runtime.InteropServices.MemoryMarshal.Cast<byte, T>(dst)[0]
                    read(&reader, &value)
                    fldName
            )

        registerJsonFieldMapping<Int32Id>(
            "MeshId", "Mesh",
            (assetId, writer) ->
                match (genv.MeshManager.TryGetName(assetId))
                | Some(name) =>
                    writer.WriteStringValue(name)
                | _ =>
                    writer.WriteStringValue(string.Empty),
            (reader, assetId) ->
                assetId <- genv.MeshManager.TryFindId(reader.GetString())
        )

        registerJsonFieldMapping<Int32Id>(
            "PipelineId", "Shader",
            (assetId, writer) ->
                match (genv.Pipelines.TryGetName(assetId))
                | Some(name) =>
                    writer.WriteStringValue(name)
                | _ =>
                    writer.WriteStringValue(string.Empty),
            (reader, assetId) ->
                assetId <- genv.Pipelines.TryFindId(reader.GetString())
        )

        registerJsonFieldMapping<Int32Id>(
            "ImageId", "Texture",
            (assetId, writer) ->
                match (genv.Images.TryGetName(assetId))
                | Some(name) =>
                    writer.WriteStringValue(name)
                | _ =>
                    writer.WriteStringValue(string.Empty),
            (reader, assetId) ->
                assetId <- genv.Images.TryFindId(reader.GetString())
        )

        registerJsonFieldMapping<float32>(
            "Yaw", "Yaw",
            (value, writer) ->
                writer.WriteNumberValue(degrees(value)),
            (reader, value) ->
                value <- radians(reader.GetSingle())
        )

        registerJsonFieldMapping<float32>(
            "Pitch", "Pitch",
            (value, writer) ->
                writer.WriteNumberValue(degrees(value)),
            (reader, value) ->
                value <- radians(reader.GetSingle())
        )

        registerJsonFieldMapping<float32>(
            "Roll", "Roll",
            (value, writer) ->
                writer.WriteNumberValue(degrees(value)),
            (reader, value) ->
                value <- radians(reader.GetSingle())
        )

    Reset(): () =
        EntityDatabase.Reset(this.Database)
