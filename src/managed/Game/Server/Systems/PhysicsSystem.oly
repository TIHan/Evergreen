namespace Game.Server.Systems

open System
open System.Numerics

open Evergreen.Network
open Evergreen.Database
open Evergreen.Physics
open Evergreen.Utilities

open Game.Shared
open Game.Shared.Systems
open static Game.Shared.World
open static Game.Shared.Types
open static Game.Shared.Components

class ServerPhysicsSystem =
    inherits PhysicsSystem

    field inputQueue: System.Collections.Generic.Queue<LogicInput> // TODO: Do this at the EntityDatabase level.

    new(db: UnlockedEntityDatabase, genv: GameEnv) =
        base(PhysicsSystemKind.Server, db, genv) with {
            inputQueue = System.Collections.Generic.Queue<LogicInput>()
        }

    static Create(db: UnlockedEntityDatabase, genv: GameEnv): ServerPhysicsSystem =
        let physicsSystem = ServerPhysicsSystem(db, genv)

        physicsSystem.ContactAdded.Add(
            args ->
                db.IfHas<StaticRigidBody, LogicOutput>(args.Entity1,
                    (body, output) ->
                        if (body.IsSensor)
                            match (output.Target)
                            | Target.Activator =>
                                let mutable input = LogicInput()
                                input.This <- args.Entity2
                                input.Function <- output.TargetFunction
                                physicsSystem.inputQueue.Enqueue(input)
                            | _ =>
                                LogServerWarning(args.Entity1.ToString() + "'s output does not have a target.")
                )
                db.IfHas<StaticRigidBody, LogicOutput>(args.Entity2,
                    (body, output) ->
                        if (body.IsSensor)
                            match (output.Target)
                            | Target.Activator =>
                                let mutable input = LogicInput()
                                input.This <- args.Entity1
                                input.Function <- output.TargetFunction
                                physicsSystem.inputQueue.Enqueue(input)
                            | _ =>
                                LogServerWarning(args.Entity2.ToString() + "'s output does not have a target.")
                )
        )
        physicsSystem

    overrides Update(time: GameTime): () =
        let db = this.db
        let physics = this.physics

        db.CreateQuery<Player, CharacterInput>().ForEach(
            (entId, player, playerInput) ->
                player.ClientInputFrame <- playerInput.Frame
                if (!player.Flags.HasFlag(PlayerFlags.Host))
                    this.UpdatePlayer(time.DeltaTime, entId, &playerInput)
        )

        base.Update(time)

        let mutable input = default
        while (this.inputQueue.TryDequeue(&input))
            let _ = db.Create(BuiltInComponents.ServerSide(), input)

        let destroyQueue = System.Collections.Generic.Queue<EntityId>() // TODO: Do this in EntityDatabase.
        db.CreateQuery<LogicInput>().ForEach(
            (mutable entId, input) ->
                if (!input.This.IsNil)
                    match (input.Function)
                    | InputFunction.Destroy =>
                        destroyQueue.Enqueue(input.This)
                    | _ =>
                        ()
                destroyQueue.Enqueue(entId)
        )
        let mutable entId = default
        while (destroyQueue.TryDequeue(&entId))
            let _ = db.TryDelete(entId)            
            