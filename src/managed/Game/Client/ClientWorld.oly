namespace Game.Client

open System
open System.Numerics
open System.Text
open System.Collections.Generic
open System.Collections.Concurrent
open System.Runtime.InteropServices

open Evergreen.Utilities
open Evergreen.Database
open Evergreen.Graphics
open Evergreen.Physics
open Evergreen.Network
open Evergreen.Graphics.Rendering
open Evergreen.Window

open Game.Shared
open static Game.Shared.Types
open static Game.Shared.Components
open static Game.Shared.World

open Game.Client.Systems
open static Game.Client.Types
open static Game.Client.Components

class ClientReceivedWorld =
    inherits World

    new(genv: GameEnv) =
        let registry = ComponentRegistry()

        World.RegisterComponents(registry)

        registry.Register<CharacterInput>()
        registry.RegisterAttachment<Player, CharacterInput>()

        World.RegisterFieldMappings(genv, registry)

        base(EntityDatabase(EntityDatabaseKind.Client, registry))

class ClientStagingWorld =
    inherits World
    
    new(genv: GameEnv) =
        base(EntityDatabase(EntityDatabaseKind.Client, ClientWorld.CreateRegistry(genv)))

    protected new(db: EntityDatabase) = base(db)

class ClientWorld =
    inherits World
    implements IDisposable, IUnlockedWorld

    static CreateRegistry(genv: GameEnv): ComponentRegistry =
        let registry = ComponentRegistry()

        World.RegisterComponents(registry)

        registry.Register<CharacterInput>()
        registry.RegisterAttachment<Player, CharacterInput>()

        registry.Register<CharacterId>()
        registry.Register<VirtualCharacterId>()
        registry.RegisterAttachment<Character, CharacterId>()
        registry.RegisterAttachment<VirtualCharacter, VirtualCharacterId>()

        registry.Register<StaticObjectId>()
        registry.Register<DynamicObjectId>()
        registry.RegisterAttachment<StaticRigidBody, StaticObjectId>()
        registry.RegisterAttachment<RigidBody, DynamicObjectId>()

        registry.Register<PredictiveInfo>()
        registry.RegisterAttachment<RigidBody, PredictiveInfo>()

        registry.Register<CameraLerp>()
        registry.RegisterAttachment<Camera, CameraLerp>()

        registry.Register<TransformLerp>()
        registry.RegisterAttachment<Transform, TransformLerp>()

        registry.Register<EditorLerp>()
        registry.RegisterAttachment<Editor, EditorLerp>()

        World.RegisterFieldMappings(genv, registry)

        registry

    UnlockedDatabase: UnlockedEntityDatabase get

    new(genv: GameEnv, isListenServer: bool) =
        let db = UnlockedEntityDatabase(EntityDatabaseKind.Client, ClientWorld.CreateRegistry(genv))
        base(db) with {
            Physics = 
                if (isListenServer)
                    None
                else
                    // This registers the events in the physics system first.
                    let physicsSystem = ClientPhysicsSystem.Create(db, genv)

                    db.HandleComponentAdded<PredictiveInfo, /**/ Transform>(
                        (entId, predictiveInfo, transform) ->
                            predictiveInfo.EntityId <- entId
                            predictiveInfo.TransitionDuration <- 2
                            predictiveInfo.LerpToPredictTransitionTime <- 0
                            predictiveInfo.PredictToLerpTransitionTime <- 0
                            predictiveInfo.Position <- transform.Position
                            predictiveInfo.Rotation <- transform.Rotation
                            predictiveInfo.Status <- PredictionStatus.NotPredicting                      
                    )    

                    Some(physicsSystem)
            UnlockedDatabase = 
                db.HandleComponentAdded<TransformLerp, /**/ Transform>(
                    (entId, transformLerp, transform) ->
                        transformLerp.Value <- transform
                        transformLerp.Value.Sequence <- ByteSequence.Zero // forces a teleport
                )

                db.HandleComponentAdded<CameraLerp, /**/ Camera>(
                    (entId, cameraLerp, camera) ->
                        cameraLerp.Value <- camera
                        db.IfHas<CharacterInput>(entId,
                            input ->
                                input.Yaw <- camera.Yaw
                                input.Pitch <- camera.Pitch
                        )
                )

                // The client is the authority for which direction the editor's camera will be on spawn.
                db.HandleComponentAdded<Editor, Transform>(
                    (_, editor, transform) ->
                        editor.Camera.LookAt(editor.Transform.Position, transform.Position)
                )

                db.HandleComponentAdded<EditorLerp, /**/ Editor>(
                    (entId, editorLerp, editor) ->
                        editorLerp.Transform <- editor.Transform
                        editorLerp.Camera <- editor.Camera
                        editorLerp.Transform.Sequence <- ByteSequence.Zero // forces a teleport
                        db.IfHas<CharacterInput>(entId,
                            input ->
                                input.Yaw <- editor.Camera.Yaw
                                input.Pitch <- editor.Camera.Pitch
                        )
                )
                db
        }
    
    public field Physics: Option<ClientPhysicsSystem>

    PredictionEnabled: bool
        get() = 
            match (this.Physics)
            | Some(physics) =>
                physics.PredictionEnabled
            | _ =>
                false
        set(value) = 
            match (this.Physics)
            | Some(physics) =>
                physics.PredictionEnabled <- value
            | _ =>
                ()

    IsValidPhysicsId(physId: VirtualCharacterId): bool =
        match (this.Physics)
        | Some(physics) =>
            physics.IsValidPhysicsId(physId)
        | _ =>
            false

    PredictUpdate(time: GameTime, entId: EntityId): () =
        match (this.Physics)
        | Some(physics) =>
            if (this.PredictionEnabled)
                physics.Update(time)
        | _ =>
            ()

    ResetPredictions(): () =
        match (this.Physics)
        | Some(physics) =>
            physics.ResetPredictions()
        | _ =>
            ()

    RecordPlayerPredictions(deltaTime: float32, entId: EntityId): () =
        match (this.Physics)
        | Some(physics) =>
            if (this.PredictionEnabled)
                physics.RecordPlayerPredictions(deltaTime, entId)
        | _ =>
            ()

    SetPhysicsState(): () =
        match (this.Physics)
        | Some(physics) =>
            physics.SetState()
        | _ =>
            ()

    UpdateTransforms(): () =
        match (this.Physics)
        | Some(physics) =>
            physics.UpdateTransforms()
        | _ =>
            ()

    RollbackCorrections(time: GameTime, entId: EntityId): () =
        match (this.Physics)
        | Some(physics) =>
            physics.RollbackCorrections(time, entId)
        | _ =>
            ()

    SetInterpolationState(): () =
        let db = this.Database
        db.CreateQuery<TransformLerp, Transform>().ForEach(
            (entId, transformLerp, transform) ->
                transformLerp <- TransformLerp(transform)
        )
        db.CreateQuery<CameraLerp, Camera>().ForEach(
            (entId, cameraLerp, camera) ->
                cameraLerp <- CameraLerp(camera)
        )
        db.CreateQuery<EditorLerp, Editor>().ForEach(
            (entId, editorLerp, editor) ->
                editorLerp.Transform <- editor.Transform
                editorLerp.Camera <- editor.Camera
        )

    OptimizeStaticEnvironment(): () =
        match (this.Physics)
        | Some(physics) =>
            physics.OptimizeBroadPhase()
        | _ =>
            ()

    Dispose(): () =
        match (this.Physics)
        | Some(physics) =>
            physics.Dispose()
        | _ =>
            ()
