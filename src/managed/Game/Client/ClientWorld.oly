namespace Game.Client

open System
open System.Numerics
open System.Text
open System.Collections.Generic
open System.Collections.Concurrent
open System.Runtime.InteropServices

open Evergreen.Utilities
open Evergreen.Database
open Evergreen.Graphics
open Evergreen.Physics
open Evergreen.Network
open Evergreen.Graphics.Rendering
open Evergreen.Window

open Game.Shared
open static Game.Shared.Types
open static Game.Shared.Components
open static Game.Shared.World

open Game.Client.Systems
open static Game.Client.Types
open static Game.Client.Components

// TODO: These should be world extensions, as at some point we never should expose the database from the world.
//       The world is supposed to act like a repository.
#[open]
extension EntityDatabaseClientExtensions =
    inherits EntityDatabase

    IfHasCamera(entId: EntityId, f: scoped (cameraId: EntityId, prevTransform: byref<Transform>, transform: byref<Transform>, prevCamera: byref<Camera>, camera: byref<Camera>) -> ()): () =
        let db = this

        let mutable hasEditor = false
        db.IfHas<Editor>(entId,
            editor ->
                hasEditor <-
                    db.TryGet<TransformLerp, Transform, CameraLerp, Camera>(editor.CameraId,
                        (transformLerp, transform, cameraLerp, camera) ->
                            f(editor.CameraId, &transformLerp.Value, &transform, &cameraLerp.Value, &camera)
                    )
        )
        if (!hasEditor)
            db.IfHas<TransformLerp, Transform, CameraLerp, Camera>(entId,
                (transformLerp, transform, cameraLerp, camera) ->
                    f(entId, &transformLerp.Value, &transform, &cameraLerp.Value, &camera)
            )

class ClientReceivedWorld =
    inherits World

    new(genv: GameEnv) =
        let registry = ComponentRegistry()

        World.RegisterComponents(registry)

        registry.Register<CharacterInput>()
        registry.RegisterAttachment<Player, CharacterInput>()

        World.RegisterFieldMappings(genv, registry)

        base(EntityDatabase(EntityDatabaseKind.Client, registry))

class ClientStagingWorld =
    inherits World
    
    new(genv: GameEnv) =
        base(EntityDatabase(EntityDatabaseKind.Client, ClientWorld.CreateRegistry(genv)))

    protected new(db: EntityDatabase) = base(db)

class ClientWorld =
    inherits World
    implements IDisposable, IUnlockedWorld

    static CreateRegistry(genv: GameEnv): ComponentRegistry =
        let registry = ComponentRegistry()

        World.RegisterComponents(registry)

        registry.Register<CharacterInput>()
        registry.RegisterAttachment<Player, CharacterInput>()

        registry.Register<CharacterId>()
        registry.Register<VirtualCharacterId>()
        registry.RegisterAttachment<Character, CharacterId>()
        registry.RegisterAttachment<VirtualCharacter, VirtualCharacterId>()

        registry.Register<StaticObjectId>()
        registry.Register<DynamicObjectId>()
        registry.RegisterAttachment<StaticRigidBody, StaticObjectId>()
        registry.RegisterAttachment<RigidBody, DynamicObjectId>()

        registry.Register<PredictiveInfo>()
        registry.RegisterAttachment<RigidBody, PredictiveInfo>()

        registry.Register<CameraLerp>()
        registry.RegisterAttachment<Camera, CameraLerp>()

        registry.Register<TransformLerp>()
        registry.RegisterAttachment<Transform, TransformLerp>()

        World.RegisterFieldMappings(genv, registry)

        registry

    private IsListenServer: bool get
    UnlockedDatabase: UnlockedEntityDatabase get

    new(genv: GameEnv, isListenServer: bool) =
        let db = UnlockedEntityDatabase(EntityDatabaseKind.Client, ClientWorld.CreateRegistry(genv))
        base(db) with {
            PredictionEnabled = true
            IsListenServer = isListenServer
            Physics = 
                // if (isListenServer)
                //     None
                // else
                    // This registers the events in the physics system first.
                    let physicsSystem = ClientPhysicsSystem.Create(db, genv)

                    db.HandleComponentAdded<PredictiveInfo, /**/ Transform>(
                        (entId, predictiveInfo, transform) ->
                            predictiveInfo.EntityId <- entId
                            predictiveInfo.TransitionDuration <- 2
                            predictiveInfo.LerpToPredictTransitionTime <- 0
                            predictiveInfo.PredictToLerpTransitionTime <- 0
                            predictiveInfo.Position <- transform.Position
                            predictiveInfo.Rotation <- transform.Rotation
                            predictiveInfo.Status <- PredictionStatus.NotPredicting                      
                    )    

                    Some(physicsSystem)
            UnlockedDatabase = 
                db.HandleComponentAdded<TransformLerp, /**/ Transform>(
                    (entId, transformLerp, transform) ->
                        transformLerp.Value <- transform
                        transformLerp.Value.Sequence <- ByteSequence.Zero // forces a teleport
                )

                db.HandleComponentAdded<CameraLerp, /**/ Camera>(
                    (entId, cameraLerp, camera) ->
                        cameraLerp.Value <- camera
                )

                db
        }
    
    public field Physics: Option<ClientPhysicsSystem>

    PredictionEnabled: bool get, set

    IsValidPhysicsId(physId: VirtualCharacterId): bool =
        match (this.Physics)
        | Some(physics) =>
            physics.IsValidPhysicsId(physId)
        | _ =>
            false

    PredictUpdate(time: GameTime, entId: EntityId): () =
        match (this.Physics)
        | Some(physics) =>
            if (this.PredictionEnabled && !this.IsListenServer)
                physics.Update(time)
        | _ =>
            ()

    ResetPredictions(): () =
        match (this.Physics)
        | Some(physics) =>
            physics.ResetPredictions()
        | _ =>
            ()

    PredictPlayer(deltaTime: float32, playerId: EntityId, input: inref<CharacterInput>): () =
        let db = this.Database

        match (this.Physics)
        | Some(physics) =>
            if (this.PredictionEnabled && !this.IsListenServer)
                physics.UpdatePlayer(deltaTime, playerId, &input)
                physics.RecordPlayerPredictions(deltaTime, playerId)
                // UpdatePlayerTransform
                db.IfHas<Transform, VirtualCharacterId>(playerId,
                    (transform, physId) ->
                        transform.Position <- physics.physics.GetCenterOfMassPosition(physId)
                )
        | _ =>
            ()

    SetPhysicsState(): () =
        match (this.Physics)
        | Some(physics) =>
            physics.SetState()
        | _ =>
            ()

    UpdateTransforms(): () =
        match (this.Physics)
        | Some(physics) =>
            physics.UpdateTransforms()
        | _ =>
            ()

    RollbackCorrections(time: GameTime, entId: EntityId): () =
        match (this.Physics)
        | Some(physics) =>
            if (this.PredictionEnabled && !this.IsListenServer)
                physics.RollbackCorrections(time, entId)
        | _ =>
            ()

    SetInterpolationState(): () =
        let db = this.Database
        db.CreateQuery<TransformLerp, Transform>().ForEach(
            (entId, transformLerp, transform) ->
                transformLerp <- TransformLerp(transform)
        )
        db.CreateQuery<CameraLerp, Camera>().ForEach(
            (entId, cameraLerp, camera) ->
                cameraLerp <- CameraLerp(camera)
        )

    OptimizeStaticEnvironment(): () =
        match (this.Physics)
        | Some(physics) =>
            physics.OptimizeBroadPhase()
        | _ =>
            ()

    Dispose(): () =
        match (this.Physics)
        | Some(physics) =>
            physics.Dispose()
        | _ =>
            ()
