module Game.Client.Rendering.Module

open System
open System.Numerics
open System.Text
open System.Collections.Generic
open System.Collections.Concurrent
open System.Runtime.InteropServices

open Evergreen.Utilities
open Evergreen.Database
open Evergreen.Graphics
open Evergreen.Graphics.Rendering

open static Game.AssetManager

open Game.Graphics

open Game.Shared
open static Game.Shared.Types
open static Game.Shared.Components
open static Game.Shared.World

open Game.Client.Systems
open static Game.Client.Types
open static Game.Client.Components

interface IRendererBehavior =

    GetDepthPipeline(renv: RenderEnv): GpuPipeline

    GetShadowMapPipeline(renv: RenderEnv): GpuPipeline

    GetOutlineMaskPipeline(renv: RenderEnv): GpuPipeline

    GetShadowMaps(renv: RenderEnv): IGpuFrame[]

    Update(rfenv: RenderFrameEnv, db: EntityDatabase, playerCameraId: EntityId, drawCmds: mutable VkDrawIndexedIndirectCommand[], nextDrawCmdIndex: byref<int32>, outlineLookup: DrawLookup, noOutlineLookup: DrawLookup, transparencyLookup: DrawLookup): ()

    Draw(rfenv: RenderFrameEnv, key: RenderKey, instancesDs: GpuDescriptorSet, gpuCommands: GpuCommandList): ()

    DrawOutlineMask(rfenv: RenderFrameEnv, key: RenderKey, instancesDs: GpuDescriptorSet, occluderDepthImageDs: GpuDescriptorSet, gpuCommands: GpuCommandList): ()

    DrawShadowMaps(rfenv: RenderFrameEnv, key: RenderKey, instancesDs: GpuDescriptorSet, gpuCommands: GpuCommandList): ()

class Renderer =

    internal Behavior: IRendererBehavior get

    field NoOutlineLookup: DrawLookup
    field OutlineLookup: DrawLookup
    field TransparencyLookup: DrawLookup

    internal field Instances: GpuBuffer<InstanceShaderData>
    internal field PreviousInstances: GpuBuffer<InstanceShaderData>
    internal field LerpedInstances: GpuBuffer<InstanceShaderData>
    internal field InstanceOutputs: InstanceOutputs

    internal field AABBs: GpuBuffer<AABB>
    internal field AABBComputeDescriptorSet: GpuDescriptorSet

    internal field DrawBatchIndices: GpuBuffer<DrawBatchShaderData>
    internal field mutable NextDrawCommandIndex: int32
    internal field DrawCommands: mutable VkDrawIndexedIndirectCommand[]

    internal field LerpComputeDescriptorSet: GpuDescriptorSet
    internal field FrustumCullingComputeDescriptorSet: GpuDescriptorSet

    internal field mutable InstanceCount: int32

    internal field FrustumCullingPipelineId: Int32Id

    new(maxLightCount: int32, behavior: IRendererBehavior, frustumCullingPipelineId: Int32Id) =
        let noOutlineLookup = ConcurrentDictionary(RenderKey.Comparer)
        let outlineLookup = ConcurrentDictionary(RenderKey.Comparer)
        let transparencyLookup = ConcurrentDictionary(RenderKey.Comparer)

        let instanceOutputs = InstanceOutputs(maxLightCount)

        let prevInstances =
            GpuBuffer.ZeroCreate(GpuBufferKind.Storage, GpuMemoryKind.Local, EntityDatabase.MaxNumberOfEntities)

        let instances =
            GpuBuffer.ZeroCreate(GpuBufferKind.Storage, GpuMemoryKind.Local, EntityDatabase.MaxNumberOfEntities)

        let lerpedInstances =
            GpuBuffer.ZeroCreate(GpuBufferKind.Storage, GpuMemoryKind.Local, EntityDatabase.MaxNumberOfEntities)

        let drawBatchIndices =
            GpuBuffer.ZeroCreate(GpuBufferKind.Storage, GpuMemoryKind.Local, EntityDatabase.MaxNumberOfEntities)

        let lerpComputeDescriptorSet =
            GpuDescriptorSet(
                "lerp_compute",
                GpuDescriptorSetLayout(
                    [
                        GpuDescriptorSetLayoutBinding(GpuDescriptorKind.Storage, GpuDescriptorSetLayoutBindingFlags.None, GpuStageFlags.Compute)
                        GpuDescriptorSetLayoutBinding(GpuDescriptorKind.Storage, GpuDescriptorSetLayoutBindingFlags.None, GpuStageFlags.Compute)
                        GpuDescriptorSetLayoutBinding(GpuDescriptorKind.Storage, GpuDescriptorSetLayoutBindingFlags.None, GpuStageFlags.Compute)
                    ]
                ),
                [prevInstances: IGpuInput; instances; lerpedInstances]
            )

        let frustumCullingComputeDescriptorSet =
            GpuDescriptorSet(
                "frustum_culling_compute",
                GpuDescriptorSetLayout(
                    [
                        GpuDescriptorSetLayoutBinding(GpuDescriptorKind.Storage, GpuDescriptorSetLayoutBindingFlags.None, GpuStageFlags.Compute)
                        GpuDescriptorSetLayoutBinding(GpuDescriptorKind.Storage, GpuDescriptorSetLayoutBindingFlags.None, GpuStageFlags.Compute)
                    ]
                ),
                [lerpedInstances: IGpuInput; drawBatchIndices]
            )

        let aabbs = GpuBuffer.ZeroCreate<AABB>(GpuBufferKind.Storage, GpuMemoryKind.Local, EntityDatabase.MaxNumberOfEntities)
        let aabbComputeDs =
            GpuDescriptorSet(
                "aabb_compute",
                GpuDescriptorSetLayout(
                    [
                        GpuDescriptorSetLayoutBinding(GpuDescriptorKind.Storage, GpuDescriptorSetLayoutBindingFlags.None, GpuStageFlags.Compute)
                    ]
                ),
                [aabbs: IGpuInput]
            )

        {
            FrustumCullingPipelineId = frustumCullingPipelineId
            Behavior = behavior
            NoOutlineLookup = noOutlineLookup
            OutlineLookup = outlineLookup
            TransparencyLookup = transparencyLookup
            Instances = instances
            PreviousInstances = prevInstances
            LerpedInstances = lerpedInstances
            InstanceOutputs = instanceOutputs
            AABBs = aabbs
            AABBComputeDescriptorSet = aabbComputeDs
            LerpComputeDescriptorSet = lerpComputeDescriptorSet
            FrustumCullingComputeDescriptorSet = frustumCullingComputeDescriptorSet
            DrawBatchIndices = drawBatchIndices
            NextDrawCommandIndex = 0
            DrawCommands = zeroArray(EntityDatabase.MaxNumberOfEntities)
            InstanceCount = 0
        }

    Update(renv: RenderEnv, rfenv: RenderFrameEnv, db: EntityDatabase, cameraEntId: EntityId): () =
        ForEach(this.NoOutlineLookup, 
            (mutable pair) -> 
                pair.Value.Clear()
        )

        ForEach(this.OutlineLookup, 
            (mutable pair) -> 
                pair.Value.Clear()
        )

        ForEach(this.TransparencyLookup,
            (mutable pair) -> 
                pair.Value.Clear()
        )

        let noOutlineLookup = this.NoOutlineLookup
        let outlineLookup = this.OutlineLookup
        let transparencyLookup = this.TransparencyLookup

        let instances = this.Instances
        let prevInstances = this.PreviousInstances
        let lerpedInstances = this.LerpedInstances
        let aabbs = this.AABBs
        let drawCmds = this.DrawCommands
        let drawBatchIndices = this.DrawBatchIndices

        let instanceOutputs = this.InstanceOutputs

        instances.UpdateRanges.Clear()
        prevInstances.UpdateRanges.Clear()
        lerpedInstances.UpdateRanges.Clear()
        aabbs.UpdateRanges.Clear()
        drawBatchIndices.UpdateRanges.Clear()

        instanceOutputs.ClearUpdateRanges()

        let transformsMemory = Memory(instances.Array)
        let previousTransformsMemory = Memory(prevInstances.Array)
        let aabbsMemory = Memory(aabbs.Array)
        let drawBatchIndicesMemory = Memory(drawBatchIndices.Array)

        this.Behavior.Update(rfenv, db, cameraEntId, drawCmds, &this.NextDrawCommandIndex, outlineLookup, noOutlineLookup, transparencyLookup)

        let transformsMemory = Memory(instances.Array)
        let previousTransformsMemory = Memory(prevInstances.Array)
        let aabbsMemory = Memory(aabbs.Array)
        let drawBatchIndicesMemory = Memory(drawBatchIndices.Array)
        let mutable count = 0
        count <- count + DrawHelpers.QueueDraw(count, previousTransformsMemory, transformsMemory, aabbsMemory, drawBatchIndicesMemory, noOutlineLookup)
        count <- count + DrawHelpers.QueueDraw(count, previousTransformsMemory, transformsMemory, aabbsMemory, drawBatchIndicesMemory, outlineLookup)
        count <- count + DrawHelpers.QueueDraw(count, previousTransformsMemory, transformsMemory, aabbsMemory, drawBatchIndicesMemory, transparencyLookup)

        instances.UpdateRanges.Add((0, count))
        prevInstances.UpdateRanges.Add((0, count))
        lerpedInstances.UpdateRanges.Add((0, count))
        aabbs.UpdateRanges.Add((0, count))
        drawBatchIndices.UpdateRanges.Add((0, count))

        ReadOnlySpan(drawCmds, 0, this.NextDrawCommandIndex).CopyTo(Span(instanceOutputs.PlayerCameraDrawCommands.Array))
        instanceOutputs.PlayerCameraDrawCommands.UpdateRanges.Add((0, this.NextDrawCommandIndex))
        ForEach(instanceOutputs.LightCamerasDrawCommands, 
            x -> 
                ReadOnlySpan(drawCmds, 0, this.NextDrawCommandIndex).CopyTo(Span(x.Array))
                x.UpdateRanges.Add((0, this.NextDrawCommandIndex))
        )

        instanceOutputs.AddUpdateRange((0, count))

        this.InstanceCount <- count

        instances.NeedsUpdate <- true
        prevInstances.NeedsUpdate <- true
        lerpedInstances.NeedsUpdate <- true
        aabbs.NeedsUpdate <- true
        drawBatchIndices.NeedsUpdate <- true

        instanceOutputs.SetNeedsUpdate()

        // TODO: Can't do this yet as concurrency issues with a queue
        //renv.Gpu.Update(rfenv.Textures.DescriptorSet)

    DrawOutlineMask(rfenv: RenderFrameEnv, gpuCommands: GpuCommandList): () =
        let renv = rfenv.RenderEnvironment
        let pipeline = this.Behavior.GetOutlineMaskPipeline(renv)
        let outlineOccluderFrame = renv.GetInverseOutlineMaskFrame()

        ForEach(this.OutlineLookup,
            (mutable pair) ->
                let drawQueue = pair.Value.DrawQueue
                if (drawQueue.Count > 0)
                    DrawHelpers.Draw(renv.MeshManager, renv.ImageManager, drawQueue, this.InstanceOutputs.PlayerCameraDrawCommands, renv.GlobalsDescriptorSet, pipeline, gpuCommands,
                        (key, gpuCommands) ->
                            this.Behavior.DrawOutlineMask(rfenv, key, this.InstanceOutputs.PlayerCamera.GetVertexDescriptorSet(), outlineOccluderFrame.DepthImage.GetVertexDescriptorSet(), gpuCommands)
                    )
        )

    DrawOutlineNoMask(rfenv: RenderFrameEnv, gpuCommands: GpuCommandList): () =
        let renv = rfenv.RenderEnvironment
        let pipeline = this.Behavior.GetDepthPipeline(renv)

        ForEach(this.NoOutlineLookup,
            (mutable pair) ->
                let drawQueue = pair.Value.DrawQueue
                if (drawQueue.Count > 0)
                    DrawHelpers.Draw(renv.MeshManager, renv.ImageManager, drawQueue, this.InstanceOutputs.PlayerCameraDrawCommands, renv.GlobalsDescriptorSet, pipeline, gpuCommands,
                        (key, gpuCommands) ->
                            let imageDs = renv.ImageManager.Get(key.Material.ImageId)[key.MeshKey.MaterialIndex].GetVertexDescriptorSet()
                            gpuCommands.BindDescriptorSet(1, this.InstanceOutputs.PlayerCamera.GetVertexDescriptorSet())
                            gpuCommands.BindDescriptorSet(2, imageDs)
                    )
        )

    Draw(rfenv: RenderFrameEnv, drawCmds: GpuBuffer<VkDrawIndexedIndirectCommand>, globalsDs: GpuDescriptorSet, gpuPipeline: GpuPipeline, gpuCommands: GpuCommandList, draw: scoped (RenderKey, GpuCommandList) -> ()): () =
        let renv = rfenv.RenderEnvironment
        ForEach(this.NoOutlineLookup,
            (mutable pair) ->
                let drawQueue = pair.Value.DrawQueue
                if (drawQueue.Count > 0)
                    DrawHelpers.Draw(renv.MeshManager, renv.ImageManager, drawQueue, drawCmds, globalsDs, gpuPipeline, gpuCommands, draw)
        )
        ForEach(this.OutlineLookup,
            (mutable pair) ->
                let drawQueue = pair.Value.DrawQueue
                if (drawQueue.Count > 0)
                    DrawHelpers.Draw(renv.MeshManager, renv.ImageManager, drawQueue, drawCmds, globalsDs, gpuPipeline, gpuCommands, draw)
        )
        ForEach(this.TransparencyLookup,
            (mutable pair) ->
                let drawQueue = pair.Value.DrawQueue
                if (drawQueue.Count > 0)
                    DrawHelpers.Draw(renv.MeshManager, renv.ImageManager, drawQueue, drawCmds, globalsDs, gpuPipeline, gpuCommands, draw)
        )

    Draw(rfenv: RenderFrameEnv, globalsDs: GpuDescriptorSet, gpuCommands: GpuCommandList, draw: scoped (RenderKey, GpuCommandList) -> ()): () =
        let renv = rfenv.RenderEnvironment
        ForEach(this.NoOutlineLookup,
            (mutable pair) ->
                let pipelineId = pair.Key.PipelineId
                if (pipelineId.IsValid)
                    let drawQueue = pair.Value.DrawQueue
                    if (drawQueue.Count > 0)
                        let gpuPipeline = renv.PipelineManager.Get(pipelineId)
                        DrawHelpers.Draw(renv.MeshManager, renv.ImageManager, drawQueue, this.InstanceOutputs.PlayerCameraDrawCommands, globalsDs, gpuPipeline, gpuCommands, draw)
        )
        ForEach(this.OutlineLookup,
            (mutable pair) ->
                let pipelineId = pair.Key.PipelineId
                if (pipelineId.IsValid)
                    let drawQueue = pair.Value.DrawQueue
                    if (drawQueue.Count > 0)
                        let gpuPipeline = renv.PipelineManager.Get(pipelineId)
                        DrawHelpers.Draw(renv.MeshManager, renv.ImageManager, drawQueue, this.InstanceOutputs.PlayerCameraDrawCommands, globalsDs, gpuPipeline, gpuCommands, draw)
        )

    DrawTransparency(rfenv: RenderFrameEnv, globalsDs: GpuDescriptorSet, gpuCommands: GpuCommandList, draw: scoped (RenderKey, GpuCommandList) -> ()): () =
        let renv = rfenv.RenderEnvironment
        ForEach(System.Linq.Enumerable.OrderBy(this.TransparencyLookup, (mutable x) -> x.Key.Order),
            (mutable pair) ->
                let pipelineId = pair.Key.PipelineId
                if (pipelineId.IsValid)
                    let drawQueue = pair.Value.DrawQueue
                    if (drawQueue.Count > 0)
                        let gpuPipeline = renv.PipelineManager.Get(pipelineId)
                        DrawHelpers.Draw(renv.MeshManager, renv.ImageManager, drawQueue, this.InstanceOutputs.PlayerCameraDrawCommands, globalsDs, gpuPipeline, gpuCommands, draw)
        )

    FreeResources(gpu: Gpu, renv: RenderEnv): () =
        ForEach(this.NoOutlineLookup,
            (mutable pair) ->
                pair.Value.Clear()
        )
        ForEach(this.OutlineLookup,
            (mutable pair) ->
                pair.Value.Clear()
        )
        ForEach(this.TransparencyLookup,
            (mutable pair) ->
                pair.Value.Clear()
        )
        this.NoOutlineLookup.Clear()
        this.OutlineLookup.Clear()
        this.TransparencyLookup.Clear()
        this.InstanceCount <- 0
        this.NextDrawCommandIndex <- 0
        gpu.Free(this.Instances)
        gpu.Free(this.PreviousInstances)
        gpu.Free(this.LerpedInstances)
        gpu.Free(this.AABBs)
        gpu.Free(this.AABBComputeDescriptorSet)
        gpu.Free(this.DrawBatchIndices)
        gpu.Free(this.LerpComputeDescriptorSet)
        gpu.Free(this.FrustumCullingComputeDescriptorSet)

        this.InstanceOutputs.Free(gpu)

        ForEach(DrawHelpers.ImagesToDelete, 
            x -> renv.ImageManager.Free(x)
        )
        DrawHelpers.ImagesToDelete.Clear()

    module Logic =

        Update(renv: RenderEnv, rfenv: RenderFrameEnv, renderers: IReadOnlyList<Renderer>, db: EntityDatabase, cameraId: EntityId, outLights: List<DrawLightInfo>): () =
            ForEach(renderers,
                renderer ->
                    renderer.Update(renv, rfenv, db, cameraId)
            )

            outLights.Clear()
            // TODO: Only gather the closest lights.
            db.CreateQuery<Camera, CameraLerp, Light>().ForEach(
                (entId, camera, cameraLerp, light) ->
                    if (outLights.Count < LightArrayShaderData.MaxCount)
                        let mutable info = default: DrawLightInfo
                        info.PreviousCamera <- cameraLerp.Value
                        info.Camera <- camera
                        info.Light <- light
                        outLights.Add(info)
            )

    module Passes =

        Dispatch(
                renv: RenderEnv, 
                renderers: IReadOnlyList<Renderer>,
                lightCount: int32,
                gpuCommands: GpuCommandList): () =
            let computeLerp = renv.PipelineManager.Get("Compute/Interpolation.json") // TODO: replace with getting this pipeline by index

            ForEach(renderers,
                renderer ->
                    // We never change the draw-commands array directly,
                    // but forcing an update will force a reset on the draw commands.
                    renderer.InstanceOutputs.SetNeedsUpdate()
                    gpuCommands.BindPipeline(computeLerp)
                    gpuCommands.BindDescriptorSet(0, renv.GlobalsComputeDescriptorSet)
                    gpuCommands.BindDescriptorSet(1, renderer.LerpComputeDescriptorSet)
                    gpuCommands.Dispatch(renderer.InstanceCount, 1, 1)
            )

            gpuCommands.PipelineBarrier(GpuPipelineBarrierKind.DispatchToDispatch)

            For(lightCount,
                i ->
                    if (i < renv.Lighting.MaxLightCount)
                        let lightGlobalsDescriptorSet = renv.Lighting.GetShaderGlobalsComputeDescriptorSetByIndex(i)
                        ForEach(renderers,
                            renderer ->
                                let frustumCullingPipeline = renv.PipelineManager.Get(renderer.FrustumCullingPipelineId)
                                gpuCommands.BindPipeline(frustumCullingPipeline)
                                gpuCommands.BindDescriptorSet(0, lightGlobalsDescriptorSet) // TODO-language-bug: renv.GlobalsComputeDescriptorSet() should not be called like a function
                                gpuCommands.BindDescriptorSet(1, renderer.FrustumCullingComputeDescriptorSet)
                                gpuCommands.BindDescriptorSet(2, renderer.AABBComputeDescriptorSet)
                                gpuCommands.BindDescriptorSet(3, renderer.InstanceOutputs.LightCamerasComputeDescriptorSets[i])
                                gpuCommands.Dispatch(renderer.InstanceCount, 1, 1)
                        )
            )

            ForEach(renderers,
                renderer ->
                    let frustumCullingPipeline = renv.PipelineManager.Get(renderer.FrustumCullingPipelineId)
                    gpuCommands.BindPipeline(frustumCullingPipeline)
                    gpuCommands.BindDescriptorSet(0, renv.GlobalsComputeDescriptorSet)
                    gpuCommands.BindDescriptorSet(1, renderer.FrustumCullingComputeDescriptorSet)
                    gpuCommands.BindDescriptorSet(2, renderer.AABBComputeDescriptorSet)
                    gpuCommands.BindDescriptorSet(3, renderer.InstanceOutputs.PlayerCameraComputeDescriptorSet)
                    gpuCommands.Dispatch(renderer.InstanceCount, 1, 1)
            )

            gpuCommands.PipelineBarrier(GpuPipelineBarrierKind.DispatchToDrawIndirect)

        DrawOutlineMask(rfenv: RenderFrameEnv, renderers: IReadOnlyList<Renderer>, gpuCommands: GpuCommandList): () =
            ForEach(renderers,
                renderer ->
                    renderer.DrawOutlineMask(rfenv, gpuCommands)
            )

        DrawOutlineNoMask(rfenv: RenderFrameEnv, renderers: IReadOnlyList<Renderer>, gpuCommands: GpuCommandList): () =
            ForEach(renderers,
                renderer ->
                    renderer.DrawOutlineNoMask(rfenv, gpuCommands)
            )

        DrawShadows(rfenv: RenderFrameEnv, renderers: IReadOnlyList<Renderer>, lights: IReadOnlyList<DrawLightInfo>, alpha: float32, gpuCommands: GpuCommandList): () =
            let renv = rfenv.RenderEnvironment
            let mainGlobalsBuffer = renv.GlobalsBuffer
            let sMainGlobals: inref<GlobalShaderData> = &mainGlobalsBuffer.Array[0]

            let globalsManager = renv.GlobalsManager

            For(renv.Lighting.LightCount,
                i ->
                    if (i < renv.Lighting.MaxLightCount)
                        let item = lights[i]
    
                        let lightGlobals = &renv.Lighting.GetShaderGlobalsByIndex(i) 
                        lightGlobals <- sMainGlobals

                        let camera = item.Camera

                        if (item.Light.Kind == LightKind.Spot)
                            lightGlobals.LightKind <- 1
                        else
                            lightGlobals.LightKind <- 0

                        let mutable prevTransform = item.PreviousCameraTransform
                        let mutable transform = item.CameraTransform
                        lightGlobals.View <- Matrix4x4.Lerp(prevTransform.WorldToLocalMatrix, transform.WorldToLocalMatrix, alpha)
                            
                        lightGlobals.Projection <- camera.Projection
                        lightGlobals.Resolution <- Vector2(float32(renv.Lighting.ShadowMapSize))
                        lightGlobals.SuperSamplingAmount <- 1
                        lightGlobals.FrustumPlanes <- (lightGlobals.View * lightGlobals.Projection).GetFrustumPlanes()
                        if (!Matrix4x4.Invert(lightGlobals.View, &lightGlobals.ViewInverse))
                            lightGlobals.ViewInverse <- Matrix4x4.Identity
                            LogClientWarning("View matrix was unable to be inverted")
                        if (!Matrix4x4.Invert(lightGlobals.Projection, &lightGlobals.ProjectionInverse))
                            lightGlobals.ProjectionInverse <- Matrix4x4.Identity
                            LogClientWarning("Projection matrix was unable to be inverted")

                        let lightGlobalsDescriptorSet = renv.Lighting.GetShaderGlobalsVertexFragmentDescriptorSetByIndex(i)
    
                        ForEach(renderers,
                            renderer ->
                                let shadowMapFrame = renderer.Behavior.GetShadowMaps(renv)[i]
                                let program = renderer.Behavior.GetShadowMapPipeline(renv)

                                gpuCommands.BeginFrame(shadowMapFrame)
                                renderer.Draw(rfenv, renderer.InstanceOutputs.LightCamerasDrawCommands[i], lightGlobalsDescriptorSet, program, gpuCommands,
                                    (key, gpuCommands) ->
                                        renderer.Behavior.DrawShadowMaps(rfenv, key, renderer.InstanceOutputs.LightCameras[i].GetVertexDescriptorSet(), gpuCommands)
                                )
                                gpuCommands.EndFrame()
                        )
            )

        Draw(rfenv: RenderFrameEnv, renderers: IReadOnlyList<Renderer>, gpuCommands: GpuCommandList): () =
            let renv = rfenv.RenderEnvironment
            ForEach(renderers,
                renderer ->
                    renderer.Draw(rfenv, renv.GlobalsDescriptorSet, gpuCommands,
                        (key, gpuCommands) ->
                            renderer.Behavior.Draw(rfenv, key, renderer.InstanceOutputs.PlayerCamera.GetVertexDescriptorSet(), gpuCommands)
                        )
            )

        DrawTransparency(renv: RenderEnv, rfenv: RenderFrameEnv, renderers: IReadOnlyList<Renderer>, gpuCommands: GpuCommandList): () =
            let renv = rfenv.RenderEnvironment
            ForEach(renderers,
                renderer ->
                    renderer.DrawTransparency(rfenv, renv.GlobalsDescriptorSet, gpuCommands,
                        (key, gpuCommands) ->
                            renderer.Behavior.Draw(rfenv, key, renderer.InstanceOutputs.PlayerCamera.GetVertexDescriptorSet(), gpuCommands)
                        )
            )