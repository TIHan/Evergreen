namespace Game.Client.Rendering

open System
open System.Numerics
open System.Collections.Generic
open Evergreen.Utilities
open Evergreen.Graphics.Rendering
open Evergreen.Network
open Evergreen.Database
open Evergreen.Window
open Game.Shared
open Game.Client
open static Game.Shared.World
open static Game.Shared.Types
open static Game.Shared.Components
open static Game.Client.Types
open static Game.Client.Components
open static Game.Client.Events
open static Game.Client.Rendering.Module
open static Game.Client.RenderState

open Game.Graphics

class RenderScene =
    implements IDisposable

    field Gpu: Gpu
    field renv: RenderEnv
    field mutable WorldFront: RenderingWorld
    field mutable WorldBack: RenderingWorld

    RenderingWorld: RenderingWorld get() = this.WorldFront

    new(renv: RenderEnv) =
        {
            Gpu = renv.Gpu
            renv = renv
            WorldFront = RenderingWorld(renv)
            WorldBack = RenderingWorld(renv)
        }

    ResetCharacterInputActions(characterEntId: EntityId): () =
        this.RenderingWorld.ResetCharacterInputActions(characterEntId)

    SetCharacterInput(characterEntId: EntityId, newInput: inref<CharacterInput>): () =
        this.RenderingWorld.SetCharacterInput(characterEntId, &newInput)

    TryGetCharacterInput(characterEntId: EntityId, outInput: byref<CharacterInput>): bool =
        let mutable input = default
        let mutable hasInput =
            this.WorldFront.Database.TryGet<CharacterInput>(characterEntId,
                (playerInput) ->
                    input <- playerInput
            )

        if (!hasInput)
            hasInput <-
                this.WorldBack.Database.TryGet<CharacterInput>(characterEntId,
                    (playerInput) ->
                        input <- playerInput
                )
        if (hasInput)
            outInput <- input
            true
        else
            false


    SwapState(): () =
        // swap -------------------
        let front = this.WorldFront
        let back = this.WorldBack
        this.WorldFront <- back
        this.WorldBack <- front
        // ------------------------ 

    Render(renv: RenderEnv, time: GameTime, alpha: float32, screenSize: Vector2, cameraEntId: EntityId, preCont: scoped GpuCommandList -> (), cont: scoped GpuCommandList -> (), cmds: GpuCommandList): () =
        this.WorldFront.Dispatch(renv, time, alpha, screenSize, cameraEntId, cmds)
        if (this.WorldFront.Database.Has<Camera>(cameraEntId))
            this.WorldFront.Draw(renv, alpha, preCont, cont, cmds)
        else
            preCont(cmds)
            cmds.PipelineBarrier(GpuPipelineBarrierKind.BottomPipeToAllGraphics)
            cmds.BeginSwapChainFrame()
            cont(cmds)
            cmds.EndFrame()

    CopyToBackground(clientWorld: ClientWorld, renv: RenderEnv, localClientEntId: EntityId): () =
        clientWorld.CopyTo(this.WorldBack)
        this.WorldBack.Update(renv, localClientEntId)

    CopyInputResultFrom(renv: RenderEnv, clientWorld: ClientWorld, localClientEntId: EntityId): () =
        let clientDb = clientWorld.Database
        let frontDb = this.WorldFront.Database

        let mutable currentPlayerInput = default
        let mutable currentCamera = default
        let mutable currentCameraLerp = default
        let mutable currentTransform = default
        let mutable currentTransformLerp = default
        
        clientDb.IfHas<CharacterInput>(localClientEntId,
            playerInput ->
                currentPlayerInput <- playerInput
                clientDb.IfHasCamera(localClientEntId,
                    (_, prevTransform, transform, prevCamera, camera) ->
                        currentCamera <- camera
                        currentCameraLerp <- prevCamera
                        currentTransform <- transform
                        currentTransformLerp <- prevTransform
                )
        )

        frontDb.IfHas<CharacterInput>(localClientEntId,
            playerInput ->
                playerInput <- currentPlayerInput
                frontDb.IfHasCamera(localClientEntId,
                    (_, prevTransform, transform, prevCamera, camera) ->
                        camera <- currentCamera
                        prevCamera <- currentCameraLerp
                        transform <- currentTransform
                        prevTransform <- currentTransformLerp

                        // Update transform so that the mesh can render with a rotation that matches the camera.
                        transform.Rotation <- camera.Rotation

                        prevTransform.Rotation <- prevCamera.Rotation
                        prevCamera <- camera
                )
        )

    Dispose(): () =
        this.Gpu.Wait()
        this.WorldFront.FreeResources(this.Gpu, this.renv)
        this.WorldBack.FreeResources(this.Gpu, this.renv)
        this.Gpu.Wait()