module Game.Client.RenderState

open System
open System.Numerics
open System.Text
open System.Collections.Generic
open System.Collections.Concurrent
open System.Runtime.InteropServices

open Evergreen.Utilities
open Evergreen.Database
open Evergreen.Graphics
open Evergreen.Physics
open Evergreen.Network
open Evergreen.Graphics.Rendering
open Evergreen.Window
open static Game.AssetManager

open Game.Graphics

open Game.Shared
open static Game.Shared.Types
open static Game.Shared.Components
open static Game.Shared.World

open Game.Client
open Game.Client.Systems
open static Game.Client.Types
open static Game.Client.Components
open static Game.Client.Rendering.Module

class RenderingWorld =
    inherits World

    field rfenv: RenderFrameEnv
    field lights: List<DrawLightInfo>
    field renderers: List<Renderer>

    new(renv: RenderEnv) =
        let registry = ComponentRegistry()

        World.RegisterComponents(registry)

        registry.Register<CharacterInput>()
        registry.RegisterAttachment<Player, CharacterInput>()

        registry.Register<CameraLerp>()
        registry.RegisterAttachment<Camera, CameraLerp>()

        registry.Register<TransformLerp>()
        registry.RegisterAttachment<Transform, TransformLerp>()

        let maxLightCount = LightArrayShaderData.MaxCount

        base(EntityDatabase(EntityDatabaseKind.Client, registry)) with {
            rfenv = RenderFrameEnv(renv)
            lights = List()
            renderers =
                let renderers = List()
                renderers.Add(Renderer(maxLightCount, MeshRendererBehavior(), renv.PipelineManager.FindId("Compute/FrustumCulling.json")))
                renderers.Add(Renderer(maxLightCount, SpriteRendererBehavior(), renv.PipelineManager.FindId("Compute/SpriteFrustumCulling.json")))
                renderers
        }

    private UpdateTeleportedTransforms(): () =
        let db = this.Database
        db.CreateQuery<TransformLerp, Transform>().ForEach(
            (entId, transformLerp, transform) ->
                let mutable seq = transform.Sequence
                let mutable prevSeq = transformLerp.Value.Sequence
                if (seq.IsNewerThan(prevSeq))
                    Log("teleported - current: " + seq.ToString() + " - previous: " + prevSeq.ToString())
                    transformLerp.Value <- transform
                    transformLerp.Value.Sequence <- prevSeq
                    db.IfHas<CharacterInput, CameraLerp, Camera>(entId,
                        (input, cameraLerp, camera) ->
                            camera.SetYawPitch(input.CameraYaw, input.CameraPitch)
                            cameraLerp.Value.SetYawPitch(input.CameraYaw, input.CameraPitch)
                    )
        )

    ResetCharacterInputActions(entId: EntityId): () =
        let db = this.Database
        db.IfHas<CharacterInput>(entId,
            input -> input.Actions <- CharacterActions.None
        )

    SetCharacterInput(entId: EntityId, newInput: inref<CharacterInput>): () =
        let db = this.Database
        db.IfHas<CharacterInput>(entId,
            input ->
                input <- newInput
                db.IfHasCamera(entId,
                    (_, _, _, prevCamera, camera) ->
                        camera.SetYawPitch(input.CameraYaw, input.CameraPitch)
                        prevCamera.SetYawPitch(input.CameraYaw, input.CameraPitch)
                )
        )

    Update(renv: RenderEnv, cameraId: EntityId): () =
        this.UpdateTeleportedTransforms()
        Renderer.Logic.Update(renv, this.rfenv, this.renderers, this.Database, cameraId, /* output */ this.lights)            

    Dispatch(renv: RenderEnv, time: GameTime, alpha: float32, screenSize: Vector2, cameraEntId: EntityId, cmds: GpuCommandList): () =
        Rendering.UpdateGlobalsFromCamera(renv, this.Database, cameraEntId, this.lights, alpha)
        Rendering.UpdateLights(renv, this.lights, alpha)
        Rendering.Dispatch(renv, this.renderers, this.lights.Count, cmds)

    Draw(renv: RenderEnv, alpha: float32, preCont: scoped GpuCommandList -> (), cont: scoped GpuCommandList -> (), cmds: GpuCommandList): () =
        Rendering.Draw(
            renv,
            this.rfenv,
            this.renderers,
            this.lights,
            alpha,
            preCont,
            cont,
            cmds
        )

    FreeResources(gpu: Gpu, renv: RenderEnv): () =
        ForEach(this.renderers,
            renderer ->
                renderer.FreeResources(gpu, renv)
        )
        gpu.Free(this.rfenv.Textures.Images)
        this.rfenv.Textures.Clear()
        this.lights.Clear()

// --------------------------------------------------------------------------------------------

class MeshRendererBehavior =
    implements IRendererBehavior

    GetDepthPipeline(renv: RenderEnv): GpuPipeline = renv.PipelineManager.Get("Depth.json")

    GetShadowMapPipeline(renv: RenderEnv): GpuPipeline = renv.PipelineManager.Get("ShadowMap.json")

    GetOutlineMaskPipeline(renv: RenderEnv): GpuPipeline = renv.GetMaskPipeline()

    GetShadowMaps(renv: RenderEnv): IGpuFrame[] = renv.Lighting.MeshShadowMapFrames

    Update(rfenv: RenderFrameEnv, db: EntityDatabase, playerCameraId: EntityId, drawCmds: mutable VkDrawIndexedIndirectCommand[], nextDrawCmdIndex: byref<int32>, outlineLookup: DrawLookup, noOutlineLookup: DrawLookup, transparencyLookup: DrawLookup): () =
        let renv = rfenv.RenderEnvironment

        let mutable cameraPosition = vec3.Zero
        db.IfHasCamera(playerCameraId,
            (_, _, transform, _, camera) ->
                cameraPosition <- camera.GetPosition(transform.Position)
        )

        let transparencyQueue = PriorityQueue<EntityId, float32>()

        let alwaysDrawPlayer = db.Has<Editor>(playerCameraId)

        db.CreateQuery<TransformLerp, Transform, MeshReference, Material>().WhereNotContains<Outline>().ForEach(
            (entId, transformLerp, transform, meshRef, material) ->
                if (alwaysDrawPlayer || entId != playerCameraId)
                    if (material.IsTransparent)
                        transparencyQueue.Enqueue(entId, -(cameraPosition - transform.Position).Length())
                    else
                        let pipelineId = DrawHelpers.GetPipelineIdFromMaterial(renv, DrawKind.Mesh, &material)
                        DrawHelpers.PrepareDraw(rfenv.Textures, pipelineId, DrawKind.Mesh, renv.MeshManager, renv.ImageManager, &transformLerp.Value, &transform, meshRef, material, drawCmds, &nextDrawCmdIndex, noOutlineLookup, 0)
        )

        db.CreateQuery<TransformLerp, Transform, MeshReference, Material, Outline>().ForEach(
            (entId, transformLerp, transform, meshRef, material, outline) ->
                if (alwaysDrawPlayer || entId != playerCameraId)
                    let pipelineId = DrawHelpers.GetPipelineIdFromMaterial(renv, DrawKind.Mesh, &material)
                    DrawHelpers.PrepareDraw(rfenv.Textures, pipelineId, DrawKind.Mesh, renv.MeshManager, renv.ImageManager, &transformLerp.Value, &transform, meshRef, material, drawCmds, &nextDrawCmdIndex, outlineLookup, 0)
        )

        // Transparency
        let mutable transparencyOrder = 0: byte
        let mutable entId = default
        let mutable priority = default
        while (transparencyQueue.TryDequeue(&entId, &priority))
            let _ =
                db.TryGet<TransformLerp, Transform, MeshReference, Material>(entId,
                    (transformLerp, transform, meshRef, material) ->
                        let pipelineId = DrawHelpers.GetPipelineIdFromMaterial(renv, DrawKind.Mesh, &material)
                        DrawHelpers.PrepareDraw(rfenv.Textures, pipelineId, DrawKind.Mesh, renv.MeshManager, renv.ImageManager, &transformLerp.Value, &transform, meshRef, material, drawCmds, &nextDrawCmdIndex, transparencyLookup, transparencyOrder)
                        if (transparencyOrder != 255)
                            transparencyOrder <- transparencyOrder + 1
                )

    Draw(rfenv: RenderFrameEnv, key: RenderKey, instancesDs: GpuDescriptorSet, gpuCommands: GpuCommandList): () =
        let renv = rfenv.RenderEnvironment
        let imageDs = renv.ImageManager.Get(key.Material.ImageId)[key.MeshKey.MaterialIndex].GetVertexDescriptorSet()
        gpuCommands.BindDescriptorSet(1, imageDs)
        gpuCommands.BindDescriptorSet(2, instancesDs)
        gpuCommands.BindDescriptorSet(3, renv.Lighting.LightsVertexFragmentDescriptorSet)
        gpuCommands.BindDescriptorSet(4, renv.Lighting.ShadowMapDescriptorSet)
        gpuCommands.BindDescriptorSet(5, rfenv.Textures.DescriptorSet)

    DrawOutlineMask(rfenv: RenderFrameEnv, key: RenderKey, instancesDs: GpuDescriptorSet, occluderDepthImageDs: GpuDescriptorSet, gpuCommands: GpuCommandList): () =
        let renv = rfenv.RenderEnvironment
        gpuCommands.BindDescriptorSet(1, instancesDs)
        gpuCommands.BindDescriptorSet(2, occluderDepthImageDs)

    DrawShadowMaps(rfenv: RenderFrameEnv, key: RenderKey, instancesDs: GpuDescriptorSet, gpuCommands: GpuCommandList): () =
        let renv = rfenv.RenderEnvironment
        gpuCommands.BindDescriptorSet(1, instancesDs)
        gpuCommands.BindDescriptorSet(2, renv.ImageManager.Get(key.Material.ImageId)[key.MeshKey.MaterialIndex].GetVertexDescriptorSet())

class SpriteRendererBehavior =
    implements IRendererBehavior

    GetDepthPipeline(renv: RenderEnv): GpuPipeline = renv.PipelineManager.Get("SpriteDepth.json")

    GetShadowMapPipeline(renv: RenderEnv): GpuPipeline = renv.PipelineManager.Get("SpriteShadowMap.json")

    GetOutlineMaskPipeline(renv: RenderEnv): GpuPipeline = renv.GetSpriteMaskPipeline()

    GetShadowMaps(renv: RenderEnv): IGpuFrame[] = renv.Lighting.SpriteShadowMapFrames

    Update(rfenv: RenderFrameEnv, db: EntityDatabase, playerCameraId: EntityId, drawCmds: mutable VkDrawIndexedIndirectCommand[], nextDrawCmdIndex: byref<int32>, outlineLookup: DrawLookup, noOutlineLookup: DrawLookup, transparencyLookup: DrawLookup): () =
        let renv = rfenv.RenderEnvironment
        let meshRef = renv.GetPlaneRenderMeshReference()

        let alwaysDrawPlayer = db.Has<Editor>(playerCameraId)

        let defaultRotation = quat.CreateFromAxisAngle(vec3.UnitX, radians(90))

        let mutable transparencyOrder = 0: byte
        db.CreateQuery<TransformLerp, Transform, Sprite, Material>().WhereNotContains<Outline>().ForEach(
            (entId, transformLerp, transform, _, material) ->
                if (alwaysDrawPlayer || entId != playerCameraId)
                    let pipelineId = DrawHelpers.GetPipelineIdFromMaterial(renv, DrawKind.Sprite, &material)
                    transformLerp.Value.Rotation <- defaultRotation
                    transform.Rotation <- defaultRotation
                    DrawHelpers.PrepareDraw(rfenv.Textures, pipelineId, DrawKind.Sprite, renv.MeshManager, renv.ImageManager, &transformLerp.Value, &transform, meshRef, material, drawCmds, &nextDrawCmdIndex, noOutlineLookup, 0)                       
        )

        db.CreateQuery<TransformLerp, Transform, Sprite, Material, Outline>().ForEach(
            (entId, transformLerp, transform, _, material, outline) ->
                if (alwaysDrawPlayer || entId != playerCameraId)
                    let pipelineId = DrawHelpers.GetPipelineIdFromMaterial(renv, DrawKind.Sprite, &material)
                    transformLerp.Value.Rotation <- defaultRotation
                    transform.Rotation <- defaultRotation
                    DrawHelpers.PrepareDraw(rfenv.Textures, pipelineId, DrawKind.Sprite, renv.MeshManager, renv.ImageManager, &transformLerp.Value, &transform, meshRef, material, drawCmds, &nextDrawCmdIndex, outlineLookup, 0)
        )

    Draw(rfenv: RenderFrameEnv, key: RenderKey, instancesDs: GpuDescriptorSet, gpuCommands: GpuCommandList): () =
        let renv = rfenv.RenderEnvironment
        let imageDs = renv.ImageManager.Get(key.Material.ImageId)[key.MeshKey.MaterialIndex].GetVertexDescriptorSet()
        gpuCommands.BindDescriptorSet(1, imageDs)
        gpuCommands.BindDescriptorSet(2, instancesDs)
        gpuCommands.BindDescriptorSet(3, renv.Lighting.LightsVertexFragmentDescriptorSet)
        gpuCommands.BindDescriptorSet(4, renv.Lighting.ShadowMapDescriptorSet)

    DrawOutlineMask(rfenv: RenderFrameEnv, key: RenderKey, instancesDs: GpuDescriptorSet, occluderDepthImageDs: GpuDescriptorSet, gpuCommands: GpuCommandList): () =
        let renv = rfenv.RenderEnvironment
        let imageDs = renv.ImageManager.Get(key.Material.ImageId)[key.MeshKey.MaterialIndex].GetVertexDescriptorSet()
        gpuCommands.BindDescriptorSet(1, instancesDs)
        gpuCommands.BindDescriptorSet(2, occluderDepthImageDs)
        gpuCommands.BindDescriptorSet(3, imageDs)

    DrawShadowMaps(rfenv: RenderFrameEnv, key: RenderKey, instancesDs: GpuDescriptorSet, gpuCommands: GpuCommandList): () =
        let renv = rfenv.RenderEnvironment
        gpuCommands.BindDescriptorSet(1, instancesDs)
        gpuCommands.BindDescriptorSet(2, renv.ImageManager.Get(key.Material.ImageId)[key.MeshKey.MaterialIndex].GetVertexDescriptorSet())

private module Rendering =

    private UpdateGlobalsFromCameraCore(renv: RenderEnv, lights: List<DrawLightInfo>, prevTransform: inref<Transform>, transform: inref<Transform>, prevCamera: inref<Camera>, camera: inref<Camera>, alpha: float32): () =
        let camera =
            let mutable camera = camera
            camera.SetYawPitch(prevCamera.Yaw, prevCamera.Pitch)
            camera

        let prevCameraTransform = prevCamera.GetTransform(prevTransform.Position)
        let cameraTransform = camera.GetTransform(transform.Position)

        let prev = Transform(prevCameraTransform.Position, cameraTransform.Rotation, prevCameraTransform.Scale)
        let curr = Transform(cameraTransform.Position, cameraTransform.Rotation, cameraTransform.Scale)

        let globalsBuffer = renv.GlobalsBuffer
        globalsBuffer.NeedsUpdate <- true
        let mutable sGlobals = &globalsBuffer.Array[0]
        sGlobals.View <- Matrix4x4.Lerp(prev.WorldToLocalMatrix, curr.WorldToLocalMatrix, alpha)
        sGlobals.Projection <- camera.Projection
        sGlobals.NearZ <- camera.NearPlaneDistance
        sGlobals.FarZ <- camera.FarPlaneDistance
        sGlobals.FrustumPlanes <- (sGlobals.View * sGlobals.Projection).GetFrustumPlanes()
        if (!Matrix4x4.Invert(sGlobals.View, &sGlobals.ViewInverse))
            sGlobals.ViewInverse <- Matrix4x4.Identity
            LogClientWarning("View matrix was unable to be inverted")
        if (!Matrix4x4.Invert(sGlobals.Projection, &sGlobals.ProjectionInverse))
            sGlobals.ProjectionInverse <- Matrix4x4.Identity
            LogClientWarning("Projection matrix was unable to be inverted")

        sGlobals.MainCameraView <- sGlobals.View
        sGlobals.MainCameraViewInverse <- sGlobals.ViewInverse
        sGlobals.MainCameraProjection <- sGlobals.Projection
        sGlobals.MainCameraProjectionInverse <- sGlobals.ProjectionInverse

        For(lights.Count,
            i ->
                let mutable item = lights[i]

                if (item.Light.Kind == LightKind.Directional)
                    let prevPosition = prev.Position - item.PreviousCamera.Direction * (item.PreviousCamera.FarPlaneDistance / 2)
                    let position = curr.Position - item.Camera.Direction * (item.Camera.FarPlaneDistance / 2)

                    // We round to stabilize the shadows when the target camera is moving.
                    let roundedPrevPosition = round(prevPosition)
                    let roundedPosition = round(position)

                    item.PreviousCameraTransform <- item.PreviousCamera.GetTransform(roundedPrevPosition)
                    item.CameraTransform <- item.Camera.GetTransform(roundedPosition)

                    lights[i] <- item
        )

    UpdateGlobalsFromCamera(renv: RenderEnv, db: EntityDatabase, cameraEntId: EntityId, lights: List<DrawLightInfo>, alpha: float32): () =
        db.IfHasCamera(cameraEntId,
            (_, prevTransform, transform, prevCamera, camera) ->
                UpdateGlobalsFromCameraCore(renv, lights, &prevTransform, &transform, &prevCamera, &camera, alpha)
        )

    UpdateLights(renv: RenderEnv, lights: IReadOnlyList<DrawLightInfo>, alpha: float32): () =
        let maxLights = renv.Lighting.MaxLightCount
        let mutable lightCount = 0
        // TODO: Only gather the closest lights.
        ForEach(lights,
            info ->
                if (lightCount < maxLights)
                    let sLight = &renv.Lighting.GetShaderLightByIndex(lightCount)

                    let mutable prevTransform = info.PreviousCameraTransform
                    let mutable transform = info.CameraTransform
                    sLight.View <- Matrix4x4.Lerp(prevTransform.WorldToLocalMatrix, transform.WorldToLocalMatrix, alpha)

                    sLight.Projection <- info.Camera.Projection
                    sLight.ViewProjection <- sLight.View * sLight.Projection
                    if (!Matrix4x4.Invert(sLight.View, &sLight.ViewInverse))
                        LogClientWarning("Unable to invert view")

                    let lerpTransform = Transform.FromMatrix(Matrix4x4.Lerp(prevTransform.Matrix, transform.Matrix, alpha))
                    sLight.Direction <- vec4(lerpTransform.Direction, 0)

                    lightCount <- lightCount + 1
        )
        renv.Lighting.LightCount <- lightCount

    Dispatch(renv: RenderEnv, renderers: IReadOnlyList<Renderer>, lightCount: int32, cmds: GpuCommandList): () =
        Renderer.Passes.Dispatch(renv, renderers, lightCount, cmds)

    Draw(
            renv: RenderEnv, 
            rfenv: RenderFrameEnv,
            renderers: IReadOnlyList<Renderer>, 
            lights: IReadOnlyList<DrawLightInfo>,
            alpha: float32,
            preCont: scoped GpuCommandList -> (), 
            cont: scoped GpuCommandList -> (),
            cmds: GpuCommandList): () =
        // Frames
        let screenFrame = renv.GetScreenFrame()
        let noOutlinesFrame = renv.GetInverseOutlineMaskFrame()
        let maskFrame = renv.GetMaskFrame()
        let verticalBlurFrame = renv.GetBeginBoxBlurFrame()
        let finalBlurFrame = renv.GetEndBoxBlurFrame()
        let transparencyFrame = renv.GetTransparencyFrame()

        // Pipelines
        let screenPipeline = renv.GetScreenPipeline()
        let verticalBlurPipeline = renv.GetBeginBoxBlurPipeline()
        let finalBlurPipeline = renv.GetEndBoxBlurPipeline()

        // Images
        let maskImage = maskFrame.ColorImage
        let screenImage = screenFrame.ColorImage

        // Transforms
        let screenTransform = renv.ScreenTransform

        // Meshes
        let screenMesh = renv.ScreenMesh

        // Begin Shadow Map
        Renderer.Passes.DrawShadows(rfenv, renderers, lights, alpha, cmds)
        // End Shadow Map

        cmds.PipelineBarrier(GpuPipelineBarrierKind.DepthStencilToVertexFragmentRead)

        // // Begin Main
        cmds.BeginFrame(screenFrame)
        Renderer.Passes.Draw(rfenv, renderers, cmds)
        Renderer.Passes.DrawTransparency(renv, rfenv, renderers, cmds)
        cmds.EndFrame()
        // End Main

        // Begin No Outlines
        cmds.BeginFrame(noOutlinesFrame)
        Renderer.Passes.DrawOutlineNoMask(rfenv, renderers, cmds)
        cmds.EndFrame()
        // End No Outlines
        
        cmds.PipelineBarrier(GpuPipelineBarrierKind.DepthStencilToVertexFragmentRead)

        // Begin Mask
        cmds.BeginFrame(maskFrame)
        Renderer.Passes.DrawOutlineMask(rfenv, renderers, cmds)
        cmds.EndFrame()
        // End Mask             

        cmds.PipelineBarrier(GpuPipelineBarrierKind.BottomPipeToVertexFragmentRead)

        cmds.BeginFrame(verticalBlurFrame)
        cmds.BindPipeline(verticalBlurPipeline)
        cmds.BindDescriptorSet(0, renv.GlobalsDescriptorSet)
        cmds.BindDescriptorSet(1, maskImage.GetVertexDescriptorSet())
        cmds.BindDescriptorSet(2, screenTransform.GetVertexDescriptorSet())
        cmds.BindDescriptorSet(3, maskFrame.DepthImage.GetVertexDescriptorSet())
        cmds.BindDescriptorSet(4, screenFrame.DepthImage.GetVertexDescriptorSet())
        cmds.DrawIndexed(screenMesh.Vertices, screenMesh.Indices, screenMesh.Indices.Length, 1)
        cmds.EndFrame()

        cmds.PipelineBarrier(GpuPipelineBarrierKind.BottomPipeToVertexFragmentRead)

        cmds.BeginFrame(finalBlurFrame)
        cmds.BindPipeline(finalBlurPipeline)
        cmds.BindDescriptorSet(0, renv.GlobalsDescriptorSet)
        cmds.BindDescriptorSet(1, verticalBlurFrame.ColorImage.GetVertexDescriptorSet())
        cmds.BindDescriptorSet(2, screenTransform.GetVertexDescriptorSet())
        cmds.BindDescriptorSet(3, maskFrame.ColorImage.GetVertexDescriptorSet())
        cmds.BindDescriptorSet(4, screenFrame.DepthImage.GetVertexDescriptorSet())
        cmds.DrawIndexed(screenMesh.Vertices, screenMesh.Indices, screenMesh.Indices.Length, 1)
        cmds.EndFrame()

        preCont(cmds)

        cmds.PipelineBarrier(GpuPipelineBarrierKind.BottomPipeToAllGraphics)

        // Begin Final
        cmds.BeginSwapChainFrame()
        cmds.BindPipeline(screenPipeline)
        cmds.BindDescriptorSet(0, renv.GlobalsDescriptorSet)
        cmds.BindDescriptorSet(1, screenImage.GetVertexDescriptorSet())
        cmds.BindDescriptorSet(2, noOutlinesFrame.DepthImage.GetVertexDescriptorSet())
        cmds.BindDescriptorSet(3, maskFrame.ColorImage.GetVertexDescriptorSet())
        cmds.BindDescriptorSet(4, finalBlurFrame.ColorImage.GetVertexDescriptorSet())
        cmds.DrawIndexed(screenMesh.Vertices, screenMesh.Indices, screenMesh.Indices.Length, 1)
        // End Final

        cont(cmds)
        cmds.EndFrame()
