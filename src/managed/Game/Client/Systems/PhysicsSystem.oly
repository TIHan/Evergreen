namespace Game.Client.Systems

open System
open System.Numerics
open System.Collections.Concurrent

open static Game.AssetManager
open Evergreen.Network
open Evergreen.Database
open Evergreen.Physics
open Evergreen.Audio
open Evergreen.Utilities

open Game.Shared
open Game.Shared.Systems
open static Game.Shared.Types
open static Game.Shared.Components

open static Game.Client.Types
open static Game.Client.Components

open static Game.Shared.World

#[open]
internal module ClientPhysicsSystemHelpers =

    enableRollback(physics: Physics, entId: EntityId, physId: DynamicObjectId, physInfo: byref<RigidBody>, predictiveInfo: byref<PredictiveInfo>): () =
        if (!predictiveInfo.IsPredicting)
            // This transitions to predicting.
            predictiveInfo.LerpToPredictTransitionTime <- predictiveInfo.TransitionDuration
            predictiveInfo.Status <- PredictionStatus.Predicting

        if (predictiveInfo.LerpToPredictTransitionTime <= 0)
            if (physInfo.IsActive)
                physics.Activate(physId)

        predictiveInfo.PredictToLerpTransitionTime <- 0

        let speed = physInfo.LinearVelocity.Length()
        predictiveInfo.LerpToPredictTransitionTime <- Math.Min(predictiveInfo.TransitionDuration, speed * 8)
            
    disableRollback(physics: Physics, entId: EntityId, physId: DynamicObjectId, physInfo: byref<RigidBody>, predictiveInfo: byref<PredictiveInfo>): () =
        if (predictiveInfo.IsPredicting)
            // This transitions to not predicting.
            predictiveInfo.PredictToLerpTransitionTime <- predictiveInfo.TransitionDuration
            predictiveInfo.Status <- PredictionStatus.NotPredicting

        if (predictiveInfo.PredictToLerpTransitionTime <= 0)
            physics.Deactivate(physId)

        predictiveInfo.LerpToPredictTransitionTime <- 0

        let speed = physInfo.LinearVelocity.Length()
        predictiveInfo.PredictToLerpTransitionTime <- Math.Min(predictiveInfo.TransitionDuration, speed * 8)

class ClientPhysicsSystem =
    inherits PhysicsSystem

    private struct EntityPredictionInfo =
        public field IsValid: bool
        public field Frame: FrameNumber
        public field mutable Position: vec3
        public field mutable LinearVelocity: vec3
        public field mutable Sequence: ByteSequence
        new(frame: FrameNumber, position: vec3, linearVelocity: vec3, seq: ByteSequence) =
            {
                IsValid = frame.IsValid
                Frame = frame
                Position = position
                LinearVelocity = linearVelocity
                Sequence = seq
            }

    field frameBufferMaxCount: int32
    field inputsByFrame: mutable CharacterInput[]
    field predictionsByFrame: mutable EntityPredictionInfo[]
    field inputStream: ByteStream
    field mutable lastPredictedFrame: FrameNumber

    new(db: UnlockedEntityDatabase, genv: GameEnv) =
        let frameBufferMaxCount = 30
        base(PhysicsSystemKind.Client, db, genv) with {
            frameBufferMaxCount = frameBufferMaxCount
            inputsByFrame = zeroArray(frameBufferMaxCount)
            predictionsByFrame = zeroArray(frameBufferMaxCount)
            inputStream = ByteStream()
            rollbackQueue = System.Collections.Generic.PriorityQueue()
            lastPredictedFrame = FrameNumber.Zero
        }

    static Create(db: UnlockedEntityDatabase, genv: GameEnv): ClientPhysicsSystem =
        let sys = ClientPhysicsSystem(db, genv)
        sys.ContactAdded.Add(
            args ->
                // TODO:
                ()
                // let _ =
                //     db.TryGet<PhysicsImpactInfo>(args.Entity1, 
                //         physImpactInfo ->
                //             //SoundQueue.Enqueue(args.Entity1, physImpactInfo.SoundIndex, args.Point1)
                //             ()
                //     )

                // let _ =
                //     db.TryGet<PhysicsImpactInfo>(args.Entity2,
                //         physImpactInfo ->
                //             //SoundQueue.Enqueue(args.Entity2, physImpactInfo.SoundIndex, args.Point1)
                //             ()
                //     )
        )

        let physics = sys.physics

        db.HandleComponentAdded<StaticObjectId, /**/ Transform>(
            (entId, physId, transform) ->
                transform.Position <- physics.GetCenterOfMassPosition(physId)
                               
        )

        sys

    private RecordPlayerPrediction(playerInput: inref<CharacterInput>, transform: inref<Transform>, linearVelocity: vec3): () =
        let mutable currentFrame = playerInput.Frame
        let frameIndex = currentFrame % this.frameBufferMaxCount
        this.predictionsByFrame[frameIndex] <- EntityPredictionInfo(currentFrame, transform.Position, linearVelocity, transform.Sequence)
        this.inputsByFrame[frameIndex] <- playerInput

    ResetPredictions(): () =
        For(this.predictionsByFrame.Length,
            i ->
                this.predictionsByFrame[i] <- default
        )
        For(this.inputsByFrame.Length,
            i ->
                this.inputsByFrame[i] <- default
        )

    RecordPlayerPredictions(deltaTime: float32, playerId: EntityId): () =
        let db = this.db

        db.IfHas<CharacterInput>(playerId,
            playerInput ->
                let mutable hasEditor = false
                db.IfHas<Editor>(playerId,
                    editor ->
                        hasEditor <-
                            db.TryGet<Transform>(editor.CameraId,
                                transform ->
                                    this.RecordPlayerPrediction(&playerInput, &transform, vec3.Zero)
                            )
                )
                if (!hasEditor)
                    db.IfHas<VirtualCharacter, Transform>(playerId,
                        (physCharacter, transform) ->
                            this.RecordPlayerPrediction(&playerInput, &transform, physCharacter.LinearVelocity)
                    )
        )

    SetState(): () =
        let db = this.db
        let physics = this.physics

        db.CreateQuery<RigidBody, Transform, DynamicObjectId>().ForEach(
            (entId, physInfo, transform, physId) ->
                physics.SetState(physId,
                                 transform.Position,
                                 transform.Rotation,
                                 physInfo.LinearVelocity,
                                 physInfo.AngularVelocity,
                                 Unsafe.Cast(PhysicsLayer.Moving),
                                 physInfo.IsActive)
        )

        db.CreateQuery<Character, Transform, CharacterId>().ForEach(
            (entId, physInfo, transform, physId) ->               
                physics.SetPosition(physId, transform.Position)
                physics.SetLinearVelocity(physId, physInfo.LinearVelocity)
        )

        db.CreateQuery<VirtualCharacter, Transform, VirtualCharacterId>().ForEach(
            (entId, physInfo, transform, physId) ->               
                physics.SetPosition(physId, transform.Position)
                physics.SetLinearVelocity(physId, physInfo.LinearVelocity)
        )

    UpdateTransforms(): () =
        let db = this.db
        let physics = this.physics

        db.CreateQuery<Transform, DynamicObjectId>().ForEach(
            (entId, transform, physId) ->
                transform.Position <- physics.GetCenterOfMassPosition(physId)
        )

        db.CreateQuery<Transform, CharacterId>().ForEach(
            (entId, transform, physId) ->
                transform.Position <- physics.GetCenterOfMassPosition(physId)
        )

        db.CreateQuery<Transform, VirtualCharacterId>().ForEach(
            (entId, transform, physId) ->
                transform.Position <- physics.GetCenterOfMassPosition(physId)
        )

        db.CreateQuery<Transform, StaticObjectId>().ForEach(
            (entId, transform, physId) ->     
                transform.Position <- physics.GetCenterOfMassPosition(physId)
        )

    private BaseUpdate(time: GameTime): () =
        base.Update(time)

    field rollbackQueue: System.Collections.Generic.PriorityQueue<EntityId, float32>
    RollbackCorrections(time: GameTime, entId: EntityId): () =
        // Rollback settings
        let rollbackFrameLimit = 16
        let rollbackLimit = 5 // physics dynamic object count
        let rollbackDistanceLimit = 5: float32 // meters
        let logPredictionErrors = true

        let db = this.db
        let physics = this.physics

        // --------------------------------------------------

        let _ =
            db.TryGet<Player, CharacterInput>(entId,
                (player, playerInput) ->
                    let mutable currentFrame = playerInput.Frame
                    // --------------------------------------------------

                    let position =
                        let mutable result = vec3.Zero
                        let mutable hasEditor = false
                        db.IfHas<Editor>(entId,
                            editor ->
                                hasEditor <-
                                    db.TryGet<Transform>(editor.CameraId,
                                        transform ->
                                            result <- transform.Position
                                    )
                        )
                        if (!hasEditor)
                            db.IfHas<Transform>(entId,
                                transform ->
                                    result <- transform.Position
                            )
                        result

                    let linearVelocity =
                        let mutable result = vec3.Zero
                        let mutable hasEditor = false
                        db.IfHas<Editor>(entId,
                            editor ->
                                hasEditor <- db.Has<Transform>(editor.CameraId)
                        )
                        if (!hasEditor)
                            db.IfHas<VirtualCharacter>(entId,
                                c ->
                                    result <- c.LinearVelocity
                            )
                        result

                    let sequence =
                        let mutable result = ByteSequence.Zero
                        let mutable hasEditor = false
                        db.IfHas<Editor>(entId,
                            editor ->
                                hasEditor <-
                                    db.TryGet<Transform>(editor.CameraId,
                                        transform ->
                                            result <- transform.Sequence
                                    )
                        )
                        if (!hasEditor)
                            db.IfHas<Transform>(entId,
                                transform ->
                                    result <- transform.Sequence
                            )
                        result

                    // --------------------------------------------------

                    let mutable serverFrame = player.ClientInputFrame
                    let serverFrameIndex = serverFrame % this.frameBufferMaxCount
                    let predictedInfo = this.predictionsByFrame[serverFrameIndex]
                    
                    if (predictedInfo.IsValid && predictedInfo.Frame == serverFrame)
                        let frameUpdateCount = Math.Min(this.frameBufferMaxCount, FrameNumber.GetInt32(currentFrame - serverFrame))
                        let frameUpdateCount =
                            if (frameUpdateCount > rollbackFrameLimit)
                                if (logPredictionErrors)
                                    LogClientWarning("rollback frame limit hit")
                                rollbackFrameLimit
                            else
                                frameUpdateCount

                        // --------------------------------------------------

                        // Determine which objects we should do prediction for.
                        // We do not need to predict objects if our frame-update-count is zero.
                        if (frameUpdateCount > 0)
                            db.CreateQuery<RigidBody, Transform, DynamicObjectId, PredictiveInfo>().ForEach(
                                (entId, physInfo, transform, physId, predictiveInfo) ->
                                    predictiveInfo.ServerPosition <- transform.Position
                                    predictiveInfo.ServerRotation <- transform.Rotation

                                    if (physInfo.IsPredicted)
                                        let dist = Math.Abs((transform.Position - position).Length())
                                        if (dist <= rollbackDistanceLimit)
                                            this.rollbackQueue.Enqueue(entId, dist)
                                        else
                                            disableRollback(
                                                physics,
                                                entId,
                                                physId,
                                                &physInfo,
                                                &predictiveInfo
                                            )
                                    else
                                        disableRollback(
                                            physics,
                                            entId,
                                            physId,
                                            &physInfo,
                                            &predictiveInfo
                                        )
                            )

                        // --------------------------------------------------

                        let mutable rollbackCount = 0
                        let mutable rollbackEntId = default
                        let mutable rollbackDist = 0: float32
                        while (this.rollbackQueue.TryDequeue(&rollbackEntId, &rollbackDist))
                            let _ = 
                                db.TryGet<RigidBody, DynamicObjectId, PredictiveInfo>(rollbackEntId,
                                    (physInfo, physId, predictiveInfo) ->
                                        if (rollbackCount < rollbackLimit)
                                            enableRollback(
                                                physics,
                                                entId,
                                                physId,
                                                &physInfo,
                                                &predictiveInfo
                                            )
                                        else
                                            disableRollback(
                                                physics,
                                                entId,
                                                physId,
                                                &physInfo,
                                                &predictiveInfo
                                            )
                                )
                            rollbackCount <- rollbackCount + 1

                        // --------------------------------------------------

                        if (logPredictionErrors)
                            if (predictedInfo.Position != position)
                                LogClient("predicted frame: " + serverFrame.ToString() + " - position - predicted: " + predictedInfo.Position.ToString() + " - actual: " + position.ToString())
                            if (predictedInfo.LinearVelocity != linearVelocity)
                                LogClient("predicted frame: " + serverFrame.ToString() + " - linear velocity - predicted: " + predictedInfo.LinearVelocity.ToString() + " - actual: " + linearVelocity.ToString())
                            if (predictedInfo.Sequence != sequence)
                                let mutable predictedSeq = predictedInfo.Sequence
                                let mutable seq = sequence
                                LogClient("predicted frame: "  + serverFrame.ToString() + " - teleport - predicted: " + predictedSeq.ToString() + " - actual: " + seq.ToString())

                        this.predictionsByFrame[serverFrameIndex] <- EntityPredictionInfo(serverFrame, position, linearVelocity, sequence)

                        this.ContactListeningEnabled <- false
                        let mutable i = 1
                        while (i < (frameUpdateCount + 1))
                            let nextServerFrame = (serverFrame + FrameNumber(i))
                            let frameIndex = nextServerFrame % this.frameBufferMaxCount
                            let mutable predictedInfo = this.predictionsByFrame[frameIndex]

                            if (predictedInfo.IsValid && predictedInfo.Frame == nextServerFrame)
                                let playerInput = this.inputsByFrame[frameIndex]
                                this.UpdatePlayer(time.DeltaTime, entId, &playerInput)
                                this.BaseUpdate(time)
                                db.CreateQuery<RigidBody, Transform, DynamicObjectId, PredictiveInfo>().ForEach(
                                    (entId, physInfo, transform, physId, predictiveInfo) ->
                                        if (predictiveInfo.IsPredicting || predictiveInfo.PredictToLerpTransitionTime > 0)
                                            predictiveInfo.Position <- transform.Position
                                            predictiveInfo.Rotation <- transform.Rotation
                                        else
                                            physics.Deactivate(physId)
                                )
                            else
                                i <- frameUpdateCount

                            i <- i + 1

                        this.ContactListeningEnabled <- true
                            
                    db.CreateQuery<RigidBody, Transform, DynamicObjectId, PredictiveInfo>().ForEach(
                        (entId, physInfo, transform, physId, predictiveInfo) ->
#if DEBUG
                            if (predictiveInfo.EntityId.Index != entId.Index || predictiveInfo.EntityId.Version != entId.Version)
                                fail("Entity ids do not match. There is a bug in copying database state over.")
#end

                            if (predictiveInfo.PredictToLerpTransitionTime > 0)
                                transform.Position <- Vector3.Lerp(predictiveInfo.Position, predictiveInfo.ServerPosition, predictiveInfo.PredictToLerpAlpha)
                                transform.Rotation <- Quaternion.Lerp(predictiveInfo.Rotation, predictiveInfo.ServerRotation, predictiveInfo.PredictToLerpAlpha)
                                predictiveInfo.PredictToLerpTransitionTime <- predictiveInfo.PredictToLerpTransitionTime - time.DeltaTime

                            if (predictiveInfo.LerpToPredictTransitionTime > 0)
                                transform.Position <- Vector3.Lerp(transform.Position, predictiveInfo.Position, predictiveInfo.LerpToPredictAlpha)
                                transform.Rotation <- Quaternion.Lerp(transform.Rotation, predictiveInfo.Rotation, predictiveInfo.LerpToPredictAlpha)
                                predictiveInfo.LerpToPredictTransitionTime <- predictiveInfo.LerpToPredictTransitionTime - time.DeltaTime
                    )
            )