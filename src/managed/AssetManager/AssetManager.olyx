#target "dotnet: net8"
#library

#load "*.oly"

#reference "../Physics/Evergreen.Physics.olyx"
#reference "../Database/Evergreen.Database.olyx"
#reference "../Window/Evergreen.Window.olyx"

module Game.AssetManager

open System
open System.IO
open System.Numerics
open System.Diagnostics
open System.Collections.Generic
open System.Collections.Concurrent
open System.Runtime.InteropServices
open System.Threading.Tasks

open Evergreen
open Evergreen.Utilities
open Evergreen.Physics
open Evergreen.Window
open Evergreen.Database
open Evergreen.Graphics.Backend.Vulkan
open Evergreen.Graphics.Rendering
open Evergreen.Graphics.Rendering.UI
open Evergreen.Graphics

open Evergreen.Graphics.Asset.Backend.Interop
open static Evergreen.Graphics.Asset.Backend.Interop.Methods

open Evergreen.Graphics.Shader.Backend.Interop
open static Evergreen.Graphics.Shader.Backend.Interop.Methods

open static Evergreen.Utilities.Geometry

private alias CallConvCdecl = System.Runtime.CompilerServices.CallConvCdecl

private fixed(o: object): GCHandle =
    GCHandle.Alloc(o, GCHandleType.Pinned)

private fixedCopyUTF8(str: string): GCHandle =
    fixed(System.Text.UTF8Encoding.UTF8.GetBytes(str))

private createName(groupName: string, name: string): string =
    if (String.IsNullOrWhiteSpace(groupName))
        name
    else
        groupName + "/" + name

private createNameFromDirectoryAndFilePath(directory: string, filePath: string): (name: string, groupName: string, fileName: string) =
    let fileName = Path.GetFileName(filePath)
    let groupName = Path.GetRelativePath(directory, Path.GetDirectoryName(filePath))
    let groupName =
        if (groupName == ".")
            ""
        else
            groupName
    let groupName = groupName.Replace('\\', '/')
    (createName(groupName, fileName), groupName, fileName)

interface IVirtualFileSystem =

    GetAllFilePaths(directory: string): string[]

    GetLastWriteTimeUtc(path: string): DateTime

class FileSystem =
    implements IVirtualFileSystem

    GetAllFilePaths(directory: string): string[] =
        let options = EnumerationOptions()
        options.RecurseSubdirectories <- true
        let filePaths = List()
        ForEach(Directory.EnumerateFiles(directory, "*.*", options),
            filePath ->
                filePaths.Add(filePath)
        )
        Unsafe.AsImmutable(filePaths.ToArray())

    GetLastWriteTimeUtc(path: string): DateTime =
        File.GetLastAccessTimeUtc(path)

internal class CallbackFileChanged =

    field fs: IVirtualFileSystem
    field lookup: Dictionary<string, DateTime>
    field callback: string -> ()
    new(fs: IVirtualFileSystem, callback: string -> ()) = this { fs = fs; callback = callback; lookup = Dictionary() }

    Invoke(sender: object, args: FileSystemEventArgs): () =
        AssetManager.Queue.Enqueue(      
            () ->
                let mutable canCallback = false
                let mutable dt = default
                let hasLookup = this.lookup.TryGetValue(args.FullPath, &dt)
                try
                    let mutable newDt = this.fs.GetLastWriteTimeUtc(args.FullPath)
                    if (!hasLookup || dt != newDt)
                        this.lookup[args.FullPath] <- newDt
                        canCallback <- true
                catch (ex: Exception) =>
                    ()
                if (canCallback)
                    this.callback(args.FullPath)
        )

struct Asset<T> where T: not struct =

    public field Id: Int32Id
    public field GroupName: string
    public field FileName: string
    public field Data: T

    new(id: Int32Id, groupName: string, fileName: string, dat: T) =
        this {
            Id = id
            GroupName = groupName
            FileName = fileName
            Data = dat
        }

module AssetManager =

    internal Queue: ConcurrentQueue<() -> ()> get = ConcurrentQueue()

    Flush(): () =
        let mutable f = unchecked default
        while (AssetManager.Queue.TryDequeue(&f))
            f()

class AssetManager<T> where T: not struct =

    private AsyncLock: object get
    private AsyncTasks: ConcurrentDictionary<Int32Id, Task<T>> get

    private class Item =
        public field References: HashSet<int32>
        public field LockObject: object
        public field Name: string
        public field GroupName: string
        public field FileName: string
        public field Info: Info
        public field Compute: bool -> AVal<T>
        public field mutable Reload: bool
        public field mutable Observable: Option<Var<T>>
        public field mutable Adaptive: Option<AVal<T>>

        new(name: string, groupName: string, fileName: string, info: Info, compute: bool -> AVal<T>) =
            this {
                References = HashSet()
                LockObject = System.Object()
                Name = name
                GroupName = groupName
                FileName = fileName
                Info = info
                Reload = false
                Observable = None
                Adaptive = None
                Compute = compute
            }

        static Create(directory: string, filePath: string, index: int32, compute: bool -> AVal<T>): Item =
            let fileName = Path.GetFileName(filePath)
            let info = Info(index, filePath)
            let (name, groupName, fileName) = createNameFromDirectoryAndFilePath(directory, filePath)
            Item(name, groupName, fileName, info, compute)

    private struct Info =
        public field Index: int32
        public field RealLocation: string

        new(index: int32, realLocation: string) =
            this {
                Index = index
                RealLocation = realLocation
            }

    field freeAsset: (string, T) -> ()
    field mutable itemsNextIndex: int32
    field items: List<Item>
    field mappings: ConcurrentDictionary<string, Info>
    field watchers: List<FileSystemWatcher>

    new(freeAsset: (string, T) -> ()) =
        let items = List<Item>()
        items.Add(unchecked default)
        this {
            AsyncLock = Object()
            AsyncTasks = ConcurrentDictionary()
            itemsNextIndex = 1 // We start at 1 because 0 is a dummy placeholder
            items = items
            freeAsset = freeAsset
            mappings = ConcurrentDictionary(StringComparer.OrdinalIgnoreCase)
            watchers = List()
        }

    Invalidate(name: string): () =
        this.Reload(name)

    Free(assetId: Int32Id): () =
        let item = this.items[assetId.Value]
        if (item.References.Count == 0)
            lock(this.AsyncLock,
                () ->
                    let mutable task = unchecked default
                    if (this.AsyncTasks.TryRemove(assetId, &task))
                        task.Wait() // we need to wait for the current task to finish
            
                    let item = this.GetItemAndCompute(assetId.Value, false)
                    let name = item.Name
            
                    lock(item.LockObject, 
                        () ->
                            match (item.Observable)
                            | Some(itemVar) =>
                                if (itemVar.SubscriberCount > 0)
                                    fail("Cannot free '" + name + "' because it is a dependency on another asset")
                                item.Reload <- true
                                item.Observable <- None
                                this.freeAsset(item.Info.RealLocation, itemVar.Value)
                                itemVar.Value <- unchecked default
                            | _ =>
                                fail("'" + name + "' already freed")
                    )
            )
            
    Free(name: string): () =
        this.Free(this.FindId(name))

    AddChangedHandler(name: string, handler: () -> ()): () =
        let assetId = this.FindId(name)
        let item = this.GetItemAndCompute(assetId.Value, false)
        match (item.Observable)
        | Some(var) =>
            var.Add((_) -> handler())
        | _ =>
            fail("Cannot link dependency")

    ForEach(f: scoped Asset<T> -> ()): () =
        let items = this.items
        let count = items.Count
        let mutable i = 1
        while (i < count)
            let item = this.GetItemAndCompute(i, false)
            let value =
                match (item.Observable)
                | Some(var) => var.Value
                | _ => throw NullReferenceException()
            f(Asset(Int32Id(i), item.GroupName, item.FileName, value))
            i <- i + 1

    Count: int32 get() = this.items.Count - 1

    private ComputeItem(item: Item, isAsync: bool): () =
        if (item.Observable.IsSome)
            if (item.Reload)
                try
                    item.Reload <- false
                    let itemValue = item.Compute(isAsync).Evaluate().Value
                    match (item.Observable)
                    | Some(observable) =>
                        if (observable.Value !== itemValue)
                            let name = item.Name
                            let oldValue = observable.Value
                            observable.Value <- itemValue       
                            AssetManager.Queue.Enqueue(() -> this.freeAsset(name, oldValue))         
                    | _ =>
                        fail("should not happen")
                catch (ex: Exception) =>
                    LogMultipleErrors("failed to reload '" + item.Name + "'\n" + ex.Message)
        else
            let aval = item.Compute(isAsync)
            let var = 
                let index = item.Info.Index
                aval.Evaluate(
                    SomeStruct(
                        () ->
                            let item = this.items[index]
                            match (item.Observable)
                            | Some(observable) =>
                                let name = item.Name
                                item.Reload <- true
                                item.Observable <- None
                                AssetManager.Queue.Enqueue(() -> this.freeAsset(name, observable.Value))
                            | _ =>
                                () 
                    )
                )
            let itemValue = var.Value
            item.Reload <- false
            item.Observable <- Some(var)
            item.Adaptive <- Some(aval)

    private GetItemAndCompute(index: int32, isAsync: bool): Item =
        if (index == 0)
            throw IndexOutOfRangeException("index")
        let item = this.items[index]
        if (item.Observable.IsSome && !item.Reload)
            item
        else
            lock(item.LockObject,
                () -> this.ComputeItem(item, isAsync)
            )
            item

    private GetComputedItem(assetId: Int32Id, isAsync: bool): T =
        let index = assetId.Value
        let mutable item = this.GetItemAndCompute(index, isAsync)
        match (item.Observable)
        | Some(observable) => observable.Value
        | _ => fail("should not happen")

    private TryGetItemValue(assetId: Int32Id): Option<T> =
        let item = this.items[assetId.Value]
        if (item.Observable.IsSome && !item.Reload)
            match (item.Observable)
            | Some(observable) => Some(observable.Value)
            | _ => fail("should not happen")
        else
            None

    Get(assetId: Int32Id): T =
        let item = this.items[assetId.Value]
        if (item.Observable.IsSome && !item.Reload)
            match (item.Observable)
            | Some(observable) => observable.Value
            | _ => fail("should not happen")
        else
            let mutable task: Task<T> = null
            if (this.AsyncTasks.TryGetValue(assetId, &task))
                task.Result
            else
                lock<T>(this.AsyncLock,
                    () ->
                        let item = this.items[assetId.Value]
                        if (item.Observable.IsSome && !item.Reload)
                            match (item.Observable)
                            | Some(observable) => observable.Value
                            | _ => fail("should not happen")
                        else
                            let mutable task: Task<T> = null
                            if (this.AsyncTasks.TryGetValue(assetId, &task))
                                task.Result
                            else
                                this.GetComputedItem(assetId, false)
                )

    private GetAsync(assetId: Int32Id): Task<T> =
        let mutable task: Task<T> = null
        if (this.AsyncTasks.TryGetValue(assetId, &task))
            task
        else
            lock(this.AsyncLock,
                () ->
                    if (this.AsyncTasks.TryGetValue(assetId, &task))
                        task
                    else
                        let task: Task<T> = // TODO-language-bug: Should not need to annotate 'Task<T>'
                            Task.Factory.StartNew(
                                () ->
                                    System.Threading.Thread.Sleep(1000) // artificial delay to test
                                    this.GetComputedItem(assetId, true)
                            )
                        this.AsyncTasks[assetId] <- task
                        task
            )

    GetNonBlocking(assetId: Int32Id): Option<T> =
        let task = this.GetAsync(assetId)
        if (task.IsCompletedSuccessfully)
            Some(task.Result)
        else
            None

    TryGetName(assetId: Int32Id): Option<string> =
        if (assetId.IsValid)
            let item = this.items[assetId.Value]
            Some(item.Name)
        else
            None

    Get(name: string): T =
        this.Get(this.FindId(name))

    GetAdaptive(assetId: Int32Id): AVal<T> =
        let index = assetId.Value
        let item = this.GetItemAndCompute(index, false)
        match (item.Adaptive)
        | Some(aval) =>
            aval
        | _ => 
            fail("should not happen")

    GetAdaptive(name: string): AVal<T> =
        this.GetAdaptive(this.FindId(name))
        
    TryFindId(name: string): Int32Id =
        if (String.IsNullOrWhiteSpace(name))
            Int32Id(0)
        else
            let mutable info = default
            if (this.mappings.TryGetValue(name, &info))
                Int32Id(info.Index)
            else
                Int32Id(0)

    FindId(name: string): Int32Id =
        let assetId = this.TryFindId(name)
        if (assetId.IsValid)
            assetId
        else
            fail("Unable to find asset '" + name + "'.")

    IsLoaded(assetId: Int32Id): bool =
        let item = this.items[assetId.Value]
        if (item.Observable.IsSome && !item.Reload)
            false
        else
            true

    SetReference(assetId: Int32Id, refId: int32): bool =
        let item = this.items[assetId.Value]
        item.References.Add(refId)

    RemoveReference(assetId: Int32Id, refId: int32): bool =
        let item = this.items[assetId.Value]
        item.References.Remove(refId)

    HasReference(assetId: Int32Id, refId: int32): bool =
        let item = this.items[assetId.Value]
        item.References.Contains(refId)

    GetReferenceCount(assetId: Int32Id, refId: int32): int32 =
        let item = this.items[assetId.Value]
        item.References.Count

    GetAndSetReference(name: string, refId: int32): T =
        let assetId = this.FindId(name)
        let _ = this.SetReference(assetId, refId)
        this.Get(assetId)

    private Reload(name: string): () =
        let assetId = this.TryFindId(name)
        if (assetId.IsValid)
            let mutable task = unchecked default
            if (this.AsyncTasks.TryRemove(assetId, &task))
                task.Wait() // we need to wait for the current task to finish

            let index = assetId.Value
            let mutable item = this.items[index]
            match (item.Observable)
            | Some(_) =>
                item.Reload <- true
                this.items[index] <- item
            | _ =>
                ()
            let _ = this.GetItemAndCompute(index, false)

    RegisterFiles(extensionName: string, directory: string, fs: IVirtualFileSystem, read: (string, isAsync: bool)-> T): () =
        this.RegisterFiles(extensionName, directory, fs, (filePath, isAsync) -> (return read(filePath, isAsync)): AVal<_>)

    RegisterFiles(extensionName: string, directory: string, fs: IVirtualFileSystem, read: (string, isAsync: bool) -> AVal<T>): () =
        let directory = Path.Combine(Environment.CurrentDirectory, directory)
        let filePaths = fs.GetAllFilePaths(directory)
        let filePaths = filter(filePaths, x -> x.EndsWith(extensionName, StringComparison.OrdinalIgnoreCase))

        ForEach(filePaths,
            filePath ->
                let index = this.itemsNextIndex
                this.itemsNextIndex <- this.itemsNextIndex + 1
                let item = Item.Create(directory, filePath, index, isAsync -> read(filePath, isAsync))
                this.items.Add(item)
                if (!this.mappings.TryAdd(item.Name, item.Info))
                    fail("File already assigned an index.")
        )

        let reload(filePath: string): () =
            let (name, _, _) = createNameFromDirectoryAndFilePath(directory, filePath)
            AssetManager.Queue.Enqueue(
                () ->
                    Log("Reloading '" + name + "'")
                    this.Reload(name) 
            )       

        let directory = Path.GetDirectoryName(directory)
        let fsw = FileSystemWatcher(directory)
        let mutable reload = reload
        let callback = CallbackFileChanged(fs, reload)
        let fseh = FileSystemEventHandler(callback, nint(&&callback.Invoke))
        fsw.add_Changed(fseh)
        fsw.IncludeSubdirectories <- true
        fsw.NotifyFilter <- NotifyFilters.LastWrite
        fsw.Filter <- "*" + extensionName
        fsw.EnableRaisingEvents <- true
        this.watchers.Add(fsw)

    Register(fileName: string, f: bool -> AVal<T>): () =
        this.Register("", fileName, f)

    Register(groupName: string, fileName: string, f: bool -> AVal<T>): () =
        let index = this.itemsNextIndex
        this.itemsNextIndex <- this.itemsNextIndex + 1

        let info = Info(index, fileName)
        let name = createName(groupName, fileName)
        this.items.Add(Item(name, groupName, fileName, info, f))
        if (!this.mappings.TryAdd(name, info))
            fail("Asset name already assigned an index.")

module AssetHelpers =

    internal class MeshCallbacks =

        field meshCallback: EgAssetMesh -> ()
    
        public field MeshCallbackDelegate: Delegate
    
        new(
                meshCallback: EgAssetMesh -> ()
            ) =
            this {
                meshCallback = meshCallback
                MeshCallbackDelegate = DotNet.CreateDelegate(this, &&this.MeshCallback)
            }
    
        //#[blittable] // TODO: need a new lang feature - #[blittable(cdecl)]
        MeshCallback(args: EgAssetMesh): () =
            this.meshCallback(args)
    
    CreateMesh(filePath: string): MeshGroup =
        let meshes = List<Mesh>()
    
        let callbackMesh(egMesh: EgAssetMesh) = 
            let meshDesc =
                let vertices = zeroArray<vec3>(int32(egMesh.vertexCount))
                let normals = zeroArray<vec3>(int32(egMesh.vertexCount))
                let indices = zeroArray<uint32>(int32(egMesh.indexCount))
                let texCoords = zeroArray<vec2>(int32(egMesh.vertexCount))
    
                Span(Unsafe.Cast<void*>(egMesh.vertices), vertices.Length).CopyTo(Span(vertices))
                Span(Unsafe.Cast<void*>(egMesh.normals), normals.Length).CopyTo(Span(normals))
                Span(Unsafe.Cast<void*>(egMesh.indices), indices.Length).CopyTo(Span(indices))
                Span(Unsafe.Cast<void*>(egMesh.texCoords), texCoords.Length).CopyTo(Span(texCoords))
    
                let index = int32(egMesh.materialIndex) - 1
                if (index < 0)
                    throw IndexOutOfRangeException()
    
                Mesh(
                    vertices,
                    indices,
                    normals,
                    texCoords,
                    AABB(egMesh.aabb.min, egMesh.aabb.max),
                    index
                )
            meshes.Add(meshDesc)
    
        let meshCallbacks = MeshCallbacks(callbackMesh)
        let callbackMeshPtr = Marshal.GetFunctionPointerForDelegate(meshCallbacks.MeshCallbackDelegate)
    
        let mutable filePathHandle = fixedCopyUTF8(filePath)
        if (!egAssetReadMeshes(Unsafe.AsPointer(filePathHandle.AddrOfPinnedObject()), Unsafe.Cast(callbackMeshPtr)))
            fail("Failed to read mesh.")
        filePathHandle.Free()
    
        MeshGroup(Unsafe.AsImmutable(meshes.ToArray()))
